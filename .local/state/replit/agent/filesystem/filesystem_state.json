{
  "file_contents": {
    "drizzle.config.ts": {
      "content": "import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n",
      "size_bytes": 325
    },
    "postcss.config.js": {
      "content": "export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n",
      "size_bytes": 80
    },
    "replit.md": {
      "content": "# IPL Player Auction Dashboard\n\n## Overview\n\nThis is a full-stack web application for managing and displaying IPL (Indian Premier League) 2025 player auction data. The application provides real-time visualization of player auction results, team statistics, and leaderboards through integration with Google Sheets as a data source. Built with modern web technologies, it features a responsive design optimized for auction viewing experiences.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development patterns\n- **Build Tool**: Vite for fast development builds and hot module replacement\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Framework**: Tailwind CSS with shadcn/ui component library for consistent, accessible design\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ESM modules for modern JavaScript features\n- **Development**: TSX for TypeScript execution in development\n- **API Structure**: REST endpoints with `/api` prefix for clear separation\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **Schema Management**: Drizzle Kit for migrations and schema generation\n- **Development Storage**: In-memory storage implementation for rapid prototyping\n\n### Real-time Data Integration\n- **External Data Source**: Google Sheets integration for live auction data\n- **Data Processing**: Papa Parse for CSV parsing from Google Sheets export URLs\n- **Caching Strategy**: React Query with 30-second refresh intervals for near real-time updates\n- **Data Models**: TypeScript interfaces for Player, Team, and TeamStats entities\n\n### Authentication and Session Management\n- **Session Store**: PostgreSQL-backed sessions using connect-pg-simple\n- **User Schema**: Drizzle-defined user table with username/password authentication\n- **Validation**: Zod schemas for input validation and type safety\n\n### Styling and Design System\n- **Base Framework**: Tailwind CSS with custom configuration\n- **Component Library**: Radix UI primitives with shadcn/ui wrapper components\n- **Theme**: Custom IPL-branded color palette with CSS variables\n- **Typography**: Multiple Google Fonts including Work Sans, DM Sans, and Fira Code\n- **Responsive Design**: Mobile-first approach with breakpoint-specific layouts\n\n### Development and Deployment\n- **Development Server**: Vite dev server with Express API integration\n- **Build Process**: Vite for frontend build, esbuild for backend bundling\n- **Environment**: Replit-optimized with development plugins and error overlays\n- **Code Quality**: TypeScript strict mode with comprehensive type checking\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, React Hook Form, TanStack Query\n- **TypeScript Tooling**: TSX runtime, TypeScript compiler, type definitions\n- **Build Tools**: Vite with React plugin, esbuild for production builds\n\n### Database and ORM\n- **Database**: Neon Database (PostgreSQL) via `@neondatabase/serverless`\n- **ORM**: Drizzle ORM with PostgreSQL dialect and Zod integration\n- **Migrations**: Drizzle Kit for schema management and migrations\n\n### UI and Styling\n- **Component Library**: Complete Radix UI component suite (40+ components)\n- **Styling**: Tailwind CSS with PostCSS and Autoprefixer\n- **Utilities**: clsx and tailwind-merge for conditional styling\n- **Icons**: Lucide React for consistent iconography\n\n### Data Processing\n- **CSV Parsing**: Papa Parse for Google Sheets data processing\n- **Date Handling**: date-fns for date manipulation and formatting\n- **Validation**: Zod for runtime type checking and schema validation\n\n### Development Tools\n- **Replit Integration**: Custom Vite plugins for development banner and cartographer\n- **Error Handling**: Runtime error overlay for development debugging\n- **Session Management**: connect-pg-simple for PostgreSQL session storage\n\n### External Services Integration\n- **Google Sheets**: Direct CSV export integration for real-time auction data\n- **Font Services**: Google Fonts for typography (Work Sans, DM Sans, Fira Code)\n- **Asset Management**: Static asset handling for team logos and branding",
      "size_bytes": 4598
    },
    "tailwind.config.ts": {
      "content": "module.exports = {\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\",\n    \"./src/**/*.{html,js,ts,jsx,tsx}\",\n    \"app/**/*.{ts,tsx}\",\n    \"components/**/*.{ts,tsx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        \"wwwiplt-2-0comanakiwa\": \"var(--wwwiplt-2-0comanakiwa)\",\n        \"wwwiplt-2-0combunting\": \"var(--wwwiplt-2-0combunting)\",\n        \"wwwiplt-2-0comcrimson\": \"var(--wwwiplt-2-0comcrimson)\",\n        \"wwwiplt-2-0comflamingo\": \"var(--wwwiplt-2-0comflamingo)\",\n        \"wwwiplt-2-0comsupernova\": \"var(--wwwiplt-2-0comsupernova)\",\n        \"wwwiplt-2-0comwhite\": \"var(--wwwiplt-2-0comwhite)\",\n        \"wwwiplt20comblack-3\": \"var(--wwwiplt20comblack-3)\",\n        \"wwwiplt20comchathams-blue\": \"var(--wwwiplt20comchathams-blue)\",\n        \"wwwiplt20comcod-gray\": \"var(--wwwiplt20comcod-gray)\",\n        \"wwwiplt20comconcrete-80\": \"var(--wwwiplt20comconcrete-80)\",\n        \"wwwiplt20comdaisy-bush\": \"var(--wwwiplt20comdaisy-bush)\",\n        \"wwwiplt20comdeep-sea-green\": \"var(--wwwiplt20comdeep-sea-green)\",\n        \"wwwiplt20comfalu-red\": \"var(--wwwiplt20comfalu-red)\",\n        \"wwwiplt20comprussian-blue\": \"var(--wwwiplt20comprussian-blue)\",\n        \"wwwiplt20comregal-blue\": \"var(--wwwiplt20comregal-blue)\",\n        \"wwwiplt20comtory-blue\": \"var(--wwwiplt20comtory-blue)\",\n        \"wwwiplt20comwhite-10\": \"var(--wwwiplt20comwhite-10)\",\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      fontFamily: {\n        sans: [\n          \"ui-sans-serif\",\n          \"system-ui\",\n          \"sans-serif\",\n          '\"Apple Color Emoji\"',\n          '\"Segoe UI Emoji\"',\n          '\"Segoe UI Symbol\"',\n          '\"Noto Color Emoji\"',\n        ],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n    container: { center: true, padding: \"2rem\", screens: { \"2xl\": \"1400px\" } },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n  darkMode: [\"class\"],\n};\n",
      "size_bytes": 3510
    },
    "vite.config.ts": {
      "content": "import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n",
      "size_bytes": 1009
    },
    "server/index.ts": {
      "content": "import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    log(`Error ${status}: ${message}`, \"error\");\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n",
      "size_bytes": 2100
    },
    "server/routes.ts": {
      "content": "import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n",
      "size_bytes": 473
    },
    "server/storage.ts": {
      "content": "import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n",
      "size_bytes": 993
    },
    "server/vite.ts": {
      "content": "import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n",
      "size_bytes": 2263
    },
    "shared/schema.ts": {
      "content": "import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n",
      "size_bytes": 584
    },
    "client/src/App.tsx": {
      "content": "import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\n\nimport { ElementLight } from \"@/pages/ElementLight\";\nimport { TeamDashboard } from \"@/pages/TeamDashboard\";\nimport { TeamsListing } from \"@/pages/TeamsListing\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Add pages below */}\n      <Route path=\"/\" component={ElementLight} />\n      <Route path=\"/team\" component={TeamsListing} />\n      <Route path=\"/team/:teamId\" component={TeamDashboard} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n",
      "size_bytes": 1013
    },
    "client/src/index.css": {
      "content": "@tailwind components;\n@tailwind utilities;\n\n@layer components {\n  .all-\\[unset\\] {\n    all: unset;\n  }\n  \n  .scrollbar-hide {\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n  }\n  \n  .scrollbar-hide::-webkit-scrollbar {\n    display: none;\n  }\n}\n\n/* Custom Scrollbar Styling */\n* {\n  /* Firefox */\n  scrollbar-width: thin;\n  scrollbar-color: #2a3441 #0f1629;\n}\n\n/* Webkit browsers (Chrome, Safari, Edge) */\n*::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n*::-webkit-scrollbar-track {\n  background: #0f1629;\n  border-radius: 4px;\n}\n\n*::-webkit-scrollbar-thumb {\n  background: linear-gradient(180deg, #2a3441 0%, #00bcd4 50%, #2a3441 100%);\n  border-radius: 4px;\n  border: 1px solid #1a2332;\n}\n\n*::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(180deg, #3a4451 0%, #26c6da 50%, #3a4451 100%);\n}\n\n*::-webkit-scrollbar-thumb:active {\n  background: linear-gradient(180deg, #4a5461 0%, #4dd0e1 50%, #4a5461 100%);\n}\n\n*::-webkit-scrollbar-corner {\n  background: #0f1629;\n}\n\n:root {\n  --wwwiplt-2-0comanakiwa: rgba(144, 182, 255, 1);\n  --wwwiplt-2-0combunting: rgba(24, 24, 74, 1);\n  --wwwiplt-2-0comcrimson: rgba(237, 26, 55, 1);\n  --wwwiplt-2-0comflamingo: rgba(242, 92, 25, 1);\n  --wwwiplt-2-0comsupernova: rgba(255, 204, 0, 1);\n  --wwwiplt-2-0comwhite: rgba(255, 255, 255, 1);\n  --wwwiplt20comblack-3: rgba(0, 0, 0, 0.03);\n  --wwwiplt20comchathams-blue: rgba(29, 65, 140, 1);\n  --wwwiplt20comcod-gray: rgba(28, 28, 28, 1);\n  --wwwiplt20comconcrete-80: rgba(242, 242, 242, 0.8);\n  --wwwiplt20comdaisy-bush: rgba(85, 39, 146, 1);\n  --wwwiplt20comdeep-sea-green: rgba(11, 73, 115, 1);\n  --wwwiplt20comfalu-red: rgba(132, 23, 27, 1);\n  --wwwiplt20comprussian-blue: rgba(8, 30, 64, 1);\n  --wwwiplt20comregal-blue: rgba(0, 59, 122, 1);\n  --wwwiplt20comtory-blue: rgba(23, 71, 158, 1);\n  --wwwiplt20comwhite-10: rgba(255, 255, 255, 0.1);\n}\n\n:root {\n  --animate-spin: spin 1s linear infinite;\n}\n\n.animate-fade-in {\n  animation: fade-in 1s var(--animation-delay, 0s) ease forwards;\n}\n\n.animate-fade-up {\n  animation: fade-up 1s var(--animation-delay, 0s) ease forwards;\n}\n\n.animate-marquee {\n  animation: marquee var(--duration) infinite linear;\n}\n\n.animate-marquee-vertical {\n  animation: marquee-vertical var(--duration) linear infinite;\n}\n\n.animate-shimmer {\n  animation: shimmer 8s infinite;\n}\n\n.animate-spin {\n  animation: var(--animate-spin);\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(1turn);\n  }\n}\n\n@keyframes image-glow {\n  0% {\n    opacity: 0;\n    animation-timing-function: cubic-bezier(0.74, 0.25, 0.76, 1);\n  }\n\n  10% {\n    opacity: 0.7;\n    animation-timing-function: cubic-bezier(0.12, 0.01, 0.08, 0.99);\n  }\n\n  to {\n    opacity: 0.4;\n  }\n}\n\n@keyframes fade-in {\n  0% {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n\n  to {\n    opacity: 1;\n    transform: none;\n  }\n}\n\n@keyframes fade-up {\n  0% {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n\n  to {\n    opacity: 1;\n    transform: none;\n  }\n}\n\n@keyframes shimmer {\n  0%,\n  90%,\n  to {\n    background-position: calc(-100% - var(--shimmer-width)) 0;\n  }\n\n  30%,\n  60% {\n    background-position: calc(100% + var(--shimmer-width)) 0;\n  }\n}\n\n@keyframes marquee {\n  0% {\n    transform: translate(0);\n  }\n\n  to {\n    transform: translateX(calc(-100% - var(--gap)));\n  }\n}\n\n@keyframes marquee-vertical {\n  0% {\n    transform: translateY(0);\n  }\n\n  to {\n    transform: translateY(calc(-100% - var(--gap)));\n  }\n}\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 47.4% 11.2%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n\n    --card: transparent;\n    --card-foreground: 222.2 47.4% 11.2%;\n\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 100% 50%;\n    --destructive-foreground: 210 40% 98%;\n\n    --ring: 215 20.2% 65.1%;\n\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 224 71% 4%;\n    --foreground: 213 31% 91%;\n\n    --muted: 223 47% 11%;\n    --muted-foreground: 215.4 16.3% 56.9%;\n\n    --accent: 216 34% 17%;\n    --accent-foreground: 210 40% 98%;\n\n    --popover: 224 71% 4%;\n    --popover-foreground: 215 20.2% 65.1%;\n\n    --border: 216 34% 17%;\n    --input: 216 34% 17%;\n\n    --card: transparent;\n    --card-foreground: 213 31% 91%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 1.2%;\n\n    --secondary: 222.2 47.4% 11.2%;\n    --secondary-foreground: 210 40% 98%;\n\n    --destructive: 0 63% 31%;\n    --destructive-foreground: 210 40% 98%;\n\n    --ring: 216 34% 17%;\n\n    --radius: 0.5rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n}\n",
      "size_bytes": 5028
    },
    "client/src/main.tsx": {
      "content": "import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n",
      "size_bytes": 157
    },
    "client/src/components/LeaderboardView.tsx": {
      "content": "import React, { useState, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { TeamStats, googleSheetsService } from '@/services/googleSheetsService';\nimport { ChevronUp, ChevronDown } from 'lucide-react';\n\ninterface LeaderboardViewProps {\n  leaderboard: TeamStats[];\n}\n\ntype SortField = 'rank' | 'teamName' | 'totalSpent' | 'fundsRemaining' | 'playersCount' | 'totalPoints';\ntype SortDirection = 'asc' | 'desc';\n\n// Create a component to display team logo or abbreviation\nconst TeamLogo = ({ logo, name, className = \"\" }: { logo: string; name: string; className?: string }) => {\n  // Check if logo is a file path or abbreviation\n  const isImageLogo = logo.startsWith('/') || logo.startsWith('http');\n  \n  if (isImageLogo) {\n    return (\n      <div\n        className={`w-10 h-10 aspect-square bg-cover bg-center rounded-full flex-shrink-0 ${className}`}\n        style={{ backgroundImage: `url(${logo})` }}\n      />\n    );\n  } else {\n    // Display abbreviation text with team-specific gradient\n    const teamGradient = googleSheetsService.getTeamGradient(name);\n    return (\n      <div className={`w-10 h-10 aspect-square flex items-center justify-center rounded-full flex-shrink-0 ${teamGradient} text-white text-sm font-bold ${className}`}>\n        {logo}\n      </div>\n    );\n  }\n};\n\nexport const LeaderboardView: React.FC<LeaderboardViewProps> = ({ leaderboard }) => {\n  const [sortField, setSortField] = useState<SortField>('totalPoints');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [teamLogos, setTeamLogos] = React.useState<Record<string, string>>({});\n\n  // Load team logos asynchronously\n  React.useEffect(() => {\n    googleSheetsService.getTeamConfigs().then(configs => {\n      const logoMap: Record<string, string> = {};\n      configs.forEach(config => {\n        logoMap[config.name] = config.logo;\n      });\n      setTeamLogos(logoMap);\n    });\n  }, []);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const sortedLeaderboard = useMemo(() => {\n    return [...leaderboard].sort((a, b) => {\n      let aValue: any, bValue: any;\n      \n      switch (sortField) {\n        case 'rank':\n          // Multi-level ranking: points -> budget -> alphabetical\n          if (a.totalPoints !== b.totalPoints) {\n            aValue = a.totalPoints;\n            bValue = b.totalPoints;\n          } else if (a.fundsRemaining !== b.fundsRemaining) {\n            aValue = a.fundsRemaining;\n            bValue = b.fundsRemaining;\n          } else {\n            aValue = a.teamName.toLowerCase();\n            bValue = b.teamName.toLowerCase();\n          }\n          break;\n        case 'teamName':\n          aValue = a.teamName.toLowerCase();\n          bValue = b.teamName.toLowerCase();\n          break;\n        case 'totalSpent':\n          aValue = a.totalSpent;\n          bValue = b.totalSpent;\n          break;\n        case 'fundsRemaining':\n          aValue = a.fundsRemaining;\n          bValue = b.fundsRemaining;\n          break;\n        case 'playersCount':\n          aValue = a.playersCount;\n          bValue = b.playersCount;\n          break;\n        case 'totalPoints':\n          aValue = a.totalPoints;\n          bValue = b.totalPoints;\n          break;\n        default:\n          return 0;\n      }\n      \n      if (sortDirection === 'asc') {\n        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n      } else {\n        return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\n      }\n    });\n  }, [leaderboard, sortField, sortDirection]);\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection(field === 'teamName' ? 'asc' : 'desc');\n    }\n  };\n\n  const getSortIcon = (field: SortField) => {\n    if (sortField !== field) return null;\n    return sortDirection === 'asc' ? \n      <ChevronUp className=\"w-4 h-4 ml-1\" /> : \n      <ChevronDown className=\"w-4 h-4 ml-1\" />;\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5, ease: \"easeOut\" }}\n    >\n      <Card className=\"w-full bg-[#0f1629] border-[#1a2332]\">\n      <CardHeader className=\"p-4 md:p-6\">\n        <CardTitle className=\"text-wwwiplt-2-0comwhite text-lg md:text-xl font-bold\">\n          Team Leaderboard ({leaderboard.length})\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"bg-[#1a2332] border-b border-[#2a3441]\">\n                <th \n                  className=\"p-3 md:p-4 text-left text-gray-300 text-sm font-semibold cursor-pointer hover:bg-[#2a3441] transition-colors\"\n                  onClick={() => handleSort('rank')}\n                >\n                  <div className=\"flex items-center\">\n                    Rank\n                    {getSortIcon('rank')}\n                  </div>\n                </th>\n                <th \n                  className=\"p-3 md:p-4 text-left text-gray-300 text-sm font-semibold cursor-pointer hover:bg-[#2a3441] transition-colors\"\n                  onClick={() => handleSort('teamName')}\n                >\n                  <div className=\"flex items-center\">\n                    Team Name\n                    {getSortIcon('teamName')}\n                  </div>\n                </th>\n                <th \n                  className=\"p-3 md:p-4 text-center text-gray-300 text-sm font-semibold cursor-pointer hover:bg-[#2a3441] transition-colors\"\n                  onClick={() => handleSort('totalSpent')}\n                >\n                  <div className=\"flex items-center justify-center\">\n                    Total Spent\n                    {getSortIcon('totalSpent')}\n                  </div>\n                </th>\n                <th \n                  className=\"p-3 md:p-4 text-center text-gray-300 text-sm font-semibold cursor-pointer hover:bg-[#2a3441] transition-colors\"\n                  onClick={() => handleSort('fundsRemaining')}\n                >\n                  <div className=\"flex items-center justify-center\">\n                    Remaining Budget\n                    {getSortIcon('fundsRemaining')}\n                  </div>\n                </th>\n                <th \n                  className=\"p-3 md:p-4 text-center text-gray-300 text-sm font-semibold cursor-pointer hover:bg-[#2a3441] transition-colors\"\n                  onClick={() => handleSort('playersCount')}\n                >\n                  <div className=\"flex items-center justify-center\">\n                    Total Players\n                    {getSortIcon('playersCount')}\n                  </div>\n                </th>\n                <th \n                  className=\"p-3 md:p-4 text-center text-gray-300 text-sm font-semibold cursor-pointer hover:bg-[#2a3441] transition-colors\"\n                  onClick={() => handleSort('totalPoints')}\n                >\n                  <div className=\"flex items-center justify-center\">\n                    Total Team Points\n                    {getSortIcon('totalPoints')}\n                  </div>\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {sortedLeaderboard.map((team, index) => {\n                const isEven = index % 2 === 0;\n                // Calculate rank based on multi-level sorting: points -> budget -> alphabetical\n                const sortedByRank = [...leaderboard].sort((a, b) => {\n                  // Primary: Total Points (highest first)\n                  if (a.totalPoints !== b.totalPoints) {\n                    return b.totalPoints - a.totalPoints;\n                  }\n                  // Secondary: Remaining Budget (highest first)\n                  if (a.fundsRemaining !== b.fundsRemaining) {\n                    return b.fundsRemaining - a.fundsRemaining;\n                  }\n                  // Tertiary: Alphabetical order\n                  return a.teamName.toLowerCase().localeCompare(b.teamName.toLowerCase());\n                });\n                const rank = sortedByRank.findIndex(t => t.teamId === team.teamId) + 1;\n                \n                return (\n                  <tr\n                    key={team.teamId}\n                    className={`border-b border-[#2a3441] hover:bg-[#1a2332] transition-colors ${\n                      isEven ? 'bg-[#0f1629]' : 'bg-[#151b2e]'\n                    }`}\n                  >\n                    <td className=\"p-3 md:p-4 text-center\">\n                      <div className=\"flex items-center justify-center w-7 h-7 bg-gradient-to-r from-orange-500 to-red-500 text-white font-bold text-sm\">\n                        {rank}\n                      </div>\n                    </td>\n                    <td className=\"p-3 md:p-4\">\n                      <div className=\"flex items-center gap-3\">\n                        <TeamLogo \n                          logo={teamLogos[team.teamName] || team.teamName.split(' ').map(w => w[0]).join('')} \n                          name={team.teamName} \n                        />\n                        <span className=\"text-white font-medium text-sm md:text-base\">\n                          {team.teamName}\n                        </span>\n                      </div>\n                    </td>\n                    <td className=\"p-3 md:p-4 text-center text-green-400 font-semibold text-sm md:text-base\">\n                      {formatCurrency(team.totalSpent)}\n                    </td>\n                    <td className=\"p-3 md:p-4 text-center text-blue-400 font-semibold text-sm md:text-base\">\n                      {formatCurrency(team.fundsRemaining)}\n                    </td>\n                    <td className=\"p-3 md:p-4 text-center text-white font-medium text-sm md:text-base\">\n                      {team.playersCount}\n                    </td>\n                    <td className=\"p-3 md:p-4 text-center text-yellow-400 font-semibold text-sm md:text-base\">\n                      {team.totalPoints}\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </CardContent>\n    </Card>\n    </motion.div>\n  );\n};",
      "size_bytes": 10513
    },
    "client/src/components/PlayerTable.tsx": {
      "content": "import React, { useState, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Player, Team } from '@/services/googleSheetsService';\nimport { ChevronUp, ChevronDown, Search } from 'lucide-react';\n\ninterface PlayerTableProps {\n  players: Player[];\n  title: string;\n  showTeam?: boolean;\n  showTeamFilter?: boolean;\n  teams?: Team[];\n  selectedTeamFilter?: string | null;\n  onTeamFilter?: (teamId: string | null) => void;\n  defaultSortField?: SortField;\n  defaultSortDirection?: SortDirection;\n}\n\ntype SortField = 'name' | 'role' | 'nation' | 'age' | 'basePrice' | 'soldPrice' | 'points' | 'sheetOrder';\ntype SortDirection = 'asc' | 'desc';\n\nexport const PlayerTable: React.FC<PlayerTableProps> = ({ \n  players, \n  title, \n  showTeam = true,\n  showTeamFilter = false,\n  teams = [],\n  selectedTeamFilter: externalSelectedTeam = null,\n  onTeamFilter,\n  defaultSortField = 'name',\n  defaultSortDirection = 'asc'\n}) => {\n  const [sortField, setSortField] = useState<SortField>(defaultSortField);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(defaultSortDirection);\n  const [internalSelectedTeamFilter, setInternalSelectedTeamFilter] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  \n  // Use external selection if provided, otherwise use internal state\n  const selectedTeamFilter = externalSelectedTeam !== null ? externalSelectedTeam : internalSelectedTeamFilter;\n\n  // Custom role sorting order\n  const ROLE_ORDER = ['batsman', 'bowler', 'allrounder', 'wicketkeeper'] as const;\n  const ALIASES: Record<string, string> = {\n    batter: 'batsman',\n    bat: 'batsman',\n    bowl: 'bowler',\n    ar: 'allrounder',\n    'all-rounder': 'allrounder',\n    'all rounder': 'allrounder',\n    wk: 'wicketkeeper',\n    'wicket-keeper': 'wicketkeeper',\n    'wicket keeper': 'wicketkeeper',\n    wocketkeeper: 'wicketkeeper'\n  };\n  \n  const normalizeRole = (r?: string) => {\n    const key = (r || '').toLowerCase().replace(/\\s+/g, '').replace(/-/g, '');\n    return ALIASES[key] ?? key;\n  };\n  \n  const roleRank = (r?: string) => {\n    const norm = normalizeRole(r);\n    const idx = ROLE_ORDER.indexOf(norm as any);\n    return idx === -1 ? Number.POSITIVE_INFINITY : idx;\n  };\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const sortedPlayers = useMemo(() => {\n    let filtered = players;\n    \n    // Filter by search query\n    if (searchQuery.trim()) {\n      const query = searchQuery.toLowerCase().trim();\n      filtered = filtered.filter(p => \n        (p.name?.toLowerCase() || '').includes(query) ||\n        (p.role?.toLowerCase() || '').includes(query) ||\n        (p.nation?.toLowerCase() || '').includes(query) ||\n        (p.team?.toLowerCase() || '').includes(query) ||\n        (p.age && p.age.toString().includes(query)) ||\n        (p.points && p.points.toString().includes(query))\n      );\n    }\n    \n    // Filter by team if selected\n    if (selectedTeamFilter) {\n      const selectedTeam = teams.find(t => t.id === selectedTeamFilter);\n      if (selectedTeam) {\n        filtered = filtered.filter(p => \n          p.team.toLowerCase().includes(selectedTeam.name.toLowerCase()) ||\n          p.team.toLowerCase().includes(selectedTeamFilter.toLowerCase())\n        );\n      }\n    }\n    \n    // Sort players\n    return [...filtered].sort((a, b) => {\n      let aValue: any, bValue: any;\n      \n      switch (sortField) {\n        case 'name':\n          aValue = a.name.toLowerCase();\n          bValue = b.name.toLowerCase();\n          break;\n        case 'role':\n          aValue = roleRank(a.role);\n          bValue = roleRank(b.role);\n          if (aValue === bValue) {\n            // Stable tiebreaker when roles have same rank\n            aValue = a.name.toLowerCase();\n            bValue = b.name.toLowerCase();\n          }\n          break;\n        case 'nation':\n          aValue = a.nation.toLowerCase();\n          bValue = b.nation.toLowerCase();\n          break;\n        case 'age':\n          aValue = a.age || 0;\n          bValue = b.age || 0;\n          break;\n        case 'basePrice':\n          aValue = a.basePrice;\n          bValue = b.basePrice;\n          break;\n        case 'soldPrice':\n          aValue = a.soldPrice;\n          bValue = b.soldPrice;\n          break;\n        case 'points':\n          aValue = a.points || 0;\n          bValue = b.points || 0;\n          break;\n        case 'sheetOrder':\n          aValue = a.originalIndex || 0;\n          bValue = b.originalIndex || 0;\n          break;\n        default:\n          return 0;\n      }\n      \n      if (sortDirection === 'asc') {\n        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n      } else {\n        return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\n      }\n    });\n  }, [players, sortField, sortDirection, selectedTeamFilter, teams, searchQuery]);\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n\n  const handleTeamFilter = (teamId: string | null) => {\n    // Only update internal state if not controlled externally\n    if (externalSelectedTeam === null) {\n      setInternalSelectedTeamFilter(teamId);\n    }\n    if (onTeamFilter) {\n      onTeamFilter(teamId);\n    }\n  };\n\n  const getSortIcon = (field: SortField) => {\n    if (sortField !== field) return null;\n    return sortDirection === 'asc' ? \n      <ChevronUp className=\"w-4 h-4 ml-1\" /> : \n      <ChevronDown className=\"w-4 h-4 ml-1\" />;\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5, ease: \"easeOut\" }}\n    >\n      <Card className=\"w-full bg-[#0f1629] border-[#1a2332]\">\n      <CardHeader className=\"p-4 md:p-6\">\n        <CardTitle className=\"text-wwwiplt-2-0comwhite text-lg md:text-xl font-bold\">\n          {title} ({sortedPlayers.length})\n        </CardTitle>\n        \n        {/* Search Box */}\n        <div className=\"mt-4 relative\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search players by name, role, nation, team, age, or points...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 bg-[#1a2332] border-[#2a3441] text-white placeholder:text-gray-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500\"\n            />\n          </div>\n          {searchQuery && (\n            <button\n              onClick={() => setSearchQuery('')}\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors\"\n            >\n              ✕\n            </button>\n          )}\n        </div>\n      </CardHeader>\n      \n      {/* Team Filter */}\n      {showTeamFilter && teams.length > 0 && (\n        <div className=\"px-4 md:px-6 pb-4\">\n          <div className=\"flex items-center gap-2 md:gap-3 overflow-x-auto scrollbar-hide\">\n            <Button\n              variant={selectedTeamFilter === null ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => handleTeamFilter(null)}\n              className=\"whitespace-nowrap\"\n            >\n              All Teams\n            </Button>\n            {teams.map((team) => (\n              <Button\n                key={team.id}\n                variant={selectedTeamFilter === team.id ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => handleTeamFilter(team.id)}\n                className=\"whitespace-nowrap\"\n              >\n                {team.name}\n              </Button>\n            ))}\n          </div>\n        </div>\n      )}\n      \n      <CardContent className=\"p-0\">\n        <div className=\"overflow-x-auto\">\n          <div className=\"max-h-[70vh] overflow-y-auto\">\n            <table className=\"w-full\">\n              <thead className=\"sticky top-0 bg-[#0a1120] border-b border-[#1a2332]\">\n                <tr>\n                  <th className=\"text-left p-3 md:p-4\">\n                    <span className=\"text-white font-semibold\">\n                      Sr. No.\n                    </span>\n                  </th>\n                  <th className=\"text-left p-3 md:p-4\">\n                    <button \n                      onClick={() => handleSort('name')}\n                      className=\"flex items-center text-white font-semibold hover:text-orange-300 transition-colors\"\n                    >\n                      Player Name\n                      {getSortIcon('name')}\n                    </button>\n                  </th>\n                  <th className=\"text-left p-3 md:p-4\">\n                    <button \n                      onClick={() => handleSort('role')}\n                      className=\"flex items-center text-white font-semibold hover:text-orange-300 transition-colors\"\n                    >\n                      Role\n                      {getSortIcon('role')}\n                    </button>\n                  </th>\n                  <th className=\"text-left p-3 md:p-4\">\n                    <button \n                      onClick={() => handleSort('nation')}\n                      className=\"flex items-center text-white font-semibold hover:text-orange-300 transition-colors\"\n                    >\n                      Nation\n                      {getSortIcon('nation')}\n                    </button>\n                  </th>\n                  <th className=\"text-center p-3 md:p-4\">\n                    <button \n                      onClick={() => handleSort('age')}\n                      className=\"flex items-center text-white font-semibold hover:text-orange-300 transition-colors\"\n                    >\n                      Age\n                      {getSortIcon('age')}\n                    </button>\n                  </th>\n                  <th className=\"text-right p-3 md:p-4\">\n                    <button \n                      onClick={() => handleSort('basePrice')}\n                      className=\"flex items-center text-white font-semibold hover:text-orange-300 transition-colors\"\n                    >\n                      Base Price\n                      {getSortIcon('basePrice')}\n                    </button>\n                  </th>\n                  <th className=\"text-right p-3 md:p-4\">\n                    <button \n                      onClick={() => handleSort('soldPrice')}\n                      className=\"flex items-center text-white font-semibold hover:text-orange-300 transition-colors\"\n                    >\n                      Final Bid Price\n                      {getSortIcon('soldPrice')}\n                    </button>\n                  </th>\n                  <th className=\"text-center p-3 md:p-4\">\n                    <button \n                      onClick={() => handleSort('points')}\n                      className=\"flex items-center text-white font-semibold hover:text-orange-300 transition-colors\"\n                    >\n                      Points\n                      {getSortIcon('points')}\n                    </button>\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {sortedPlayers.length === 0 ? (\n                  <tr>\n                    <td colSpan={8} className=\"text-center py-8 text-gray-400\">\n                      No players found\n                    </td>\n                  </tr>\n                ) : (\n                  sortedPlayers.map((player, index) => (\n                    <tr\n                      key={index}\n                      className={`border-b border-[#1a2332] ${index % 2 === 0 ? 'bg-[#0f1629]' : 'bg-[#1a2332]'}`}\n                    >\n                      <td className=\"p-3 md:p-4 text-gray-300 font-medium\">\n                        {index + 1}\n                      </td>\n                      <td className=\"p-3 md:p-4\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-gray-300 font-medium text-sm md:text-base\">\n                            {player.name}\n                          </span>\n                          {player.overseas && (\n                            <svg className=\"w-4 h-4 text-blue-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M3.293 9.707a1 1 0 010-1.414l6-6a1 1 0 011.414 0l6 6a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L4.707 9.707a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n                            </svg>\n                          )}\n                        </div>\n                        {showTeam && player.team && (\n                          <div className=\"text-gray-500 text-xs mt-1\">\n                            {player.team}\n                          </div>\n                        )}\n                      </td>\n                      <td className=\"p-3 md:p-4 text-gray-300 text-sm font-medium\">\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {player.role === 'Wicket Keeper' ? 'WK' : \n                           player.role === 'All Rounder' ? 'AR' : \n                           player.role === 'Opening Batsman' ? 'Opener' :\n                           player.role === 'Middle Order Batsman' ? 'Middle' :\n                           player.role === 'Tail End Batsman' ? 'Tail' :\n                           player.role === 'Opening Bowler' ? 'Opener' :\n                           player.role === 'Death Bowler' ? 'Death' :\n                           player.role}\n                        </Badge>\n                      </td>\n                      <td className=\"p-3 md:p-4 text-gray-300 text-sm font-medium\">\n                        {player.nation}\n                      </td>\n                      <td className=\"p-3 md:p-4 text-center text-gray-300 text-sm font-medium\">\n                        {player.age || '-'}\n                      </td>\n                      <td className=\"p-3 md:p-4 text-right text-gray-300 text-sm font-medium\">\n                        {formatCurrency(player.basePrice)}\n                      </td>\n                      <td className=\"p-3 md:p-4 text-right text-gray-300 text-sm font-medium\">\n                        {player.status === 'sold' ? (\n                          formatCurrency(player.soldPrice)\n                        ) : (\n                          <span className=\"text-red-400 font-medium\">UNSOLD</span>\n                        )}\n                      </td>\n                      <td className=\"p-3 md:p-4 text-center text-gray-300 text-sm font-medium\">\n                        {player.points || '-'}\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n    </motion.div>\n  );\n};",
      "size_bytes": 15355
    },
    "client/src/hooks/use-mobile.tsx": {
      "content": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
      "size_bytes": 565
    },
    "client/src/hooks/use-toast.ts": {
      "content": "import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
      "size_bytes": 3895
    },
    "client/src/hooks/useIPLData.ts": {
      "content": "import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { googleSheetsService, TeamStats, Player } from '@/services/googleSheetsService';\n\nexport const useIPLData = () => {\n  const {\n    data: teamStats,\n    isLoading: isLoadingTeams,\n    error: teamsError,\n    refetch: refetchTeams\n  } = useQuery({\n    queryKey: ['teamStats'],\n    queryFn: () => googleSheetsService.getTeamStats(),\n    refetchInterval: 5000, // Refetch every 30 seconds for real-time data\n    staleTime: 15000, // Consider data stale after 15 seconds\n  });\n\n  const {\n    data: players,\n    isLoading: isLoadingPlayers,\n    error: playersError,\n    refetch: refetchPlayers\n  } = useQuery({\n    queryKey: ['players'],\n    queryFn: () => googleSheetsService.getPlayers(),\n    refetchInterval: 5000,\n    staleTime: 15000,\n  });\n\n  const {\n    data: leaderboard,\n    isLoading: isLoadingLeaderboard,\n    error: leaderboardError,\n    refetch: refetchLeaderboard\n  } = useQuery({\n    queryKey: ['leaderboard'],\n    queryFn: () => googleSheetsService.getLeaderboard(),\n    refetchInterval: 5000,\n    staleTime: 15000,\n  });\n\n  const getSoldPlayersByTeam = (teamId: string) => {\n    return useQuery({\n      queryKey: ['soldPlayers', teamId],\n      queryFn: () => googleSheetsService.getSoldPlayersByTeam(teamId),\n      enabled: !!teamId,\n      refetchInterval: 5000,\n      staleTime: 15000,\n    });\n  };\n\n  const getUnsoldPlayers = () => {\n    return useQuery({\n      queryKey: ['unsoldPlayers'],\n      queryFn: () => googleSheetsService.getUnsoldPlayers(),\n      refetchInterval: 5000,\n      staleTime: 15000,\n    });\n  };\n\n  const refreshAllData = () => {\n    refetchTeams();\n    refetchPlayers();\n    refetchLeaderboard();\n  };\n\n  return {\n    teamStats,\n    players,\n    leaderboard,\n    isLoading: isLoadingTeams || isLoadingPlayers || isLoadingLeaderboard,\n    error: teamsError || playersError || leaderboardError,\n    getSoldPlayersByTeam,\n    getUnsoldPlayers,\n    refreshAllData,\n  };\n};",
      "size_bytes": 2010
    },
    "client/src/lib/queryClient.ts": {
      "content": "import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n",
      "size_bytes": 1383
    },
    "client/src/lib/utils.ts": {
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "size_bytes": 166
    },
    "client/src/pages/ElementLight.tsx": {
      "content": "import React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { PlayerDetailsSection } from \"./sections/PlayerDetailsSection\";\n\nexport const ElementLight = (): JSX.Element => {\n  return (\n    <motion.div \n      className=\"bg-[#18184a] w-full min-h-screen\"\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5, ease: \"easeOut\" }}\n    >\n      <PlayerDetailsSection />\n    </motion.div>\n  );\n};\n",
      "size_bytes": 460
    },
    "client/src/pages/not-found.tsx": {
      "content": "import { motion } from \"framer-motion\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <motion.div \n      className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\"\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 0.5, ease: \"easeOut\" }}\n    >\n      <motion.div\n        initial={{ y: 20 }}\n        animate={{ y: 0 }}\n        transition={{ duration: 0.6, delay: 0.2, ease: \"easeOut\" }}\n      >\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex mb-4 gap-2\">\n              <AlertCircle className=\"h-8 w-8 text-red-500\" />\n              <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n            </div>\n\n            <p className=\"mt-4 text-sm text-gray-600\">\n              Did you forget to add the page to the router?\n            </p>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </motion.div>\n  );\n}\n",
      "size_bytes": 1106
    },
    "client/src/services/googleSheetsService.ts": {
      "content": "import Papa from 'papaparse';\nimport { getTeamLogo as getTeamLogoFromAssets } from '@/assets/teamLogos';\n\n// Convert Google Sheets URL to CSV export URL\nconst SHEET_ID = '1fyX373d3bUhnBGoZuM_eQxy991hSajyZjIuVgByg-7g';\nconst BASE_CSV_URL = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/export?format=csv&gid=`;\nconst BACKUP_CSV_URL = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/gviz/tq?tqx=out:csv&gid=`;\n\n// Sheet GIDs - we'll try systematic combinations to find the right sheets\nconst SHEET_GIDS = {\n  PLAYERS_CATALOGUE: '0',\n  AUCTIONEER_SHEET: '1', // Try GID 1 first (second sheet)\n  TEAMS_BUDGET: '2', // Try GID 2 first (third sheet) \n  SYSTEMATIC_GIDS: ['1', '2', '3', '4', '5', '10', '100', '1000', '123456789', '987654321', '1849776771', '349286951', '1930268077', '0123456789']\n};\n\nexport interface Player {\n  name: string;\n  team: string;\n  role: string;\n  nation: string;\n  age?: number;\n  basePrice: number;\n  soldPrice: number;\n  status: 'sold' | 'unsold';\n  overseas: boolean;\n  points?: number;\n  originalIndex?: number;\n  images?: string;\n  t20Matches?: number;\n}\n\nexport interface Team {\n  id: string;\n  name: string;\n  logo: string;\n  fundsRemaining: number;\n  overseasPlayers: number;\n  totalPlayers: number;\n  borderColor: string;\n  bgGradient: string;\n}\n\nexport interface TeamStats {\n  teamId: string;\n  teamName: string;\n  totalSpent: number;\n  playersCount: number;\n  overseasCount: number;\n  fundsRemaining: number;\n  totalPoints: number;\n}\n\nclass GoogleSheetsService {\n  private playerDataCache: Player[] | null = null;\n  private teamStatsCache: TeamStats[] | null = null;\n  private playerCacheTimestamp: number = 0;\n  private teamCacheTimestamp: number = 0;\n  private readonly CACHE_DURATION = 60000; // 60 seconds\n\n  private async fetchCSVData(identifier: string = '0', sheetName: string = 'Unknown', useSheetName: boolean = false): Promise<any[]> {\n    try {\n      let csvUrl: string;\n      \n      if (useSheetName) {\n        // Use sheet name approach (preferred for named sheets)\n        const encodedSheetName = encodeURIComponent(identifier);\n        csvUrl = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/gviz/tq?tqx=out:csv&sheet=${encodedSheetName}`;\n        console.log(`Fetching ${sheetName} data by sheet name: ${identifier}`);\n      } else {\n        // Use GID approach (for Players Catalogue)\n        csvUrl = `${BASE_CSV_URL}${identifier}`;\n        console.log(`Fetching ${sheetName} data from GID: ${identifier}`);\n      }\n      \n      let response = await fetch(csvUrl);\n      \n      // Try backup URL if first fails and we're using GID\n      if (!response.ok && !useSheetName) {\n        response = await fetch(`${BACKUP_CSV_URL}${identifier}`);\n      }\n      \n      if (!response.ok) {\n        console.error(`Failed to fetch ${sheetName}! status: ${response.status}`);\n        return [];\n      }\n      \n      const csvText = await response.text();\n      \n      // Check if we got HTML (redirect/error) instead of CSV\n      if (csvText.trim().startsWith('<HTML>') || csvText.trim().startsWith('<!DOCTYPE')) {\n        console.error(`Got HTML response instead of CSV for ${sheetName} (${useSheetName ? 'Sheet Name' : 'GID'}: ${identifier})`);\n        return [];\n      }\n      \n      return new Promise((resolve, reject) => {\n        Papa.parse(csvText, {\n          header: true,\n          skipEmptyLines: true,\n          complete: (results) => {\n            console.log(`Successfully parsed ${results.data.length} rows from ${sheetName}`);\n            resolve(results.data);\n          },\n          error: (error: any) => {\n            console.error(`Error parsing CSV for ${sheetName}:`, error);\n            reject(error);\n          }\n        });\n      });\n    } catch (error) {\n      console.error(`Error fetching ${sheetName} data:`, error);\n      return [];\n    }\n  }\n\n  private normalizeHeader(header: string): string {\n    // Remove emojis, rupee symbols, extra spaces, and normalize\n    return header\n      .replace(/[✅🏆🔽❌₹]/g, '') // Remove emojis and rupee symbol\n      .replace(/[()]/g, '') // Remove parentheses\n      .trim()\n      .toLowerCase()\n      .replace(/\\s+/g, ' '); // Normalize spaces\n  }\n\n  private async tryMultipleGids(gids: string[], sheetName: string, expectedColumns: string[]): Promise<any[]> {\n    for (const gid of gids) {\n      try {\n        const data = await this.fetchCSVData(gid, sheetName);\n        if (data.length > 0) {\n          // Normalize all headers in the first row\n          const firstRow = data[0];\n          const normalizedHeaders = Object.keys(firstRow).map(key => this.normalizeHeader(key));\n          \n          // Check if this data has ALL expected columns (not just some)\n          const hasAllExpectedColumns = expectedColumns.every(col => \n            normalizedHeaders.some(header => \n              header.includes(col.toLowerCase().replace(/\\s+/g, ' '))\n            )\n          );\n          \n          // Additional validation: Auctioneer sheet should have status/bid data, not just player names\n          const isActualAuctioneerData = sheetName.includes('Auctioneer') ? \n            (normalizedHeaders.some(h => h.includes('final bid') || h.includes('bought by') || h.includes('status')) &&\n             !normalizedHeaders.some(h => h.includes('t20 matches') || h.includes('batting sr'))) : true;\n             \n          // Additional validation: Teams & Budget should have budget data, not player stats  \n          const isActualTeamBudgetData = sheetName.includes('Teams') ? \n            (normalizedHeaders.some(h => h.includes('total spent') || h.includes('remaining budget')) &&\n             !normalizedHeaders.some(h => h.includes('t20 matches') || h.includes('batting sr'))) : true;\n          \n          if (hasAllExpectedColumns && isActualAuctioneerData && isActualTeamBudgetData) {\n            console.log(`Found valid ${sheetName} data with GID: ${gid}, headers: ${normalizedHeaders.join(', ')}`);\n            return data;\n          } else {\n            console.log(`GID ${gid} for ${sheetName} has wrong data type (likely Players Catalogue), skipping...`);\n          }\n        }\n      } catch (error) {\n        console.log(`GID ${gid} failed for ${sheetName}, trying next...`);\n      }\n    }\n    \n    console.warn(`Could not find ${sheetName} data with any of the tried GIDs`);\n    return [];\n  }\n\n  async getPlayers(): Promise<Player[]> {\n    // Return cached data if still valid\n    if (this.playerDataCache && (Date.now() - this.playerCacheTimestamp) < this.CACHE_DURATION) {\n      console.log('Returning cached player data');\n      return this.playerDataCache;\n    }\n    \n    console.log('Fetching fresh player data from both Players Catalogue and Auctioneer Sheet...');\n    \n    // First, get the base player data from Players Catalogue\n    const catalogueData = await this.fetchCSVData('0', 'Players Catalogue');\n    \n    // Then, get auction results from Auctioneer Sheet\n    console.log('Fetching auction data directly from Auctioneer Sheet...');\n    const auctionData = await this.fetchCSVData('Auctioneer Sheet', 'Auctioneer Sheet', true);\n    \n    // Create a map of auction results by player name with flexible column matching\n    const auctionMap = new Map();\n    \n    // Only process real auction data from the actual Google Sheet\n    if (auctionData.length > 0) {\n      console.log('Processing real auction data from Google Sheet');\n      auctionData.forEach((row: any) => {\n        // Find player name column (flexible matching)\n        const playerNameKey = Object.keys(row).find(key => \n          this.normalizeHeader(key).includes('player name')\n        );\n        const playerName = playerNameKey ? row[playerNameKey]?.trim() : '';\n        \n        if (playerName) {\n          // Find other columns flexibly\n          const finalBidKey = Object.keys(row).find(key => \n            this.normalizeHeader(key).includes('final bid price')\n          );\n          const boughtByKey = Object.keys(row).find(key => \n            this.normalizeHeader(key).includes('bought by')\n          );\n          const statusKey = Object.keys(row).find(key => \n            this.normalizeHeader(key).includes('status')\n          );\n          const pointsKey = Object.keys(row).find(key => \n            this.normalizeHeader(key).includes('points')\n          );\n          \n          auctionMap.set(playerName, {\n            finalBidPrice: this.cleanPrice(finalBidKey ? row[finalBidKey] || '0' : '0'),\n            boughtBy: boughtByKey ? row[boughtByKey] || '' : '',\n            status: this.parseAuctionStatus(statusKey ? row[statusKey] || '' : ''),\n            points: parseInt(pointsKey ? row[pointsKey] || '0' : '0') || 0\n          });\n        }\n      });\n    } else {\n      console.log('No auction data found - cannot access Auctioneer Sheet. Only showing player catalogue.');\n    }\n    \n    const players = catalogueData.map((row: any, index: number) => {\n      const playerName = (row['Player Name'] || '').trim();\n      const country = row['Country'] || '';\n      const isOverseas = country && country.toLowerCase() !== 'india';\n      \n      // Get auction result for this player\n      const auctionResult = auctionMap.get(playerName);\n      const finalBidPrice = auctionResult?.finalBidPrice || 0;\n      const team = auctionResult?.boughtBy || '';\n      const statusFromSheet = auctionResult?.status || 'unsold';\n      const playerPoints = auctionResult?.points || 0;\n      \n      // Determine final status: if no final bid price or team, definitely unsold\n      let finalStatus: 'sold' | 'unsold';\n      if (finalBidPrice > 0 && team.trim() !== '') {\n        finalStatus = 'sold';\n      } else if (finalBidPrice === 0 || team.trim() === '') {\n        finalStatus = 'unsold';\n      } else {\n        finalStatus = statusFromSheet;\n      }\n      \n      return {\n        name: playerName,\n        team: team,\n        role: row['Role'] || '',\n        nation: country || (isOverseas ? 'Unknown' : 'India'),\n        age: parseInt(row['Age'] || '0') || undefined,\n        basePrice: this.cleanPrice(row['Base Prize'] || '0'),\n        soldPrice: finalBidPrice,\n        status: finalStatus,\n        overseas: isOverseas,\n        points: parseInt(row['Evaluation Points'] || '0') || 0,\n        originalIndex: index,\n        images: row['Images'] || '',\n        t20Matches: parseInt(row['T20 Matches'] || '0') || undefined\n      };\n    }).filter(player => player.name);\n    \n    // Cache the results\n    this.playerDataCache = players;\n    this.playerCacheTimestamp = Date.now();\n    console.log(`Cached ${players.length} players (${auctionMap.size} auction results merged from ${auctionData.length > 0 ? 'live sheet' : 'known sold players'})`);\n    \n    return players;\n  }\n\n  private cleanPrice(price: string): number {\n    if (!price) return 0;\n    return parseFloat(price.toString().replace(/[₹,]/g, '')) || 0;\n  }\n\n  private parseAuctionStatus(status: string): 'sold' | 'unsold' {\n    if (!status) return 'unsold';\n    const statusLower = status.toLowerCase();\n    \n    // Check for unsold indicators first (more specific)\n    if (statusLower.includes('unsold') || statusLower.includes('❌')) {\n      return 'unsold';\n    }\n    \n    // Check for sold indicators  \n    if (statusLower.includes('sold') || statusLower.includes('✅') || statusLower.includes('🏆') || statusLower.includes('🔽')) {\n      return 'sold';\n    }\n    \n    return 'unsold';\n  }\n\n  async getTeamStats(): Promise<TeamStats[]> {\n    // Return cached data if still valid\n    if (this.teamStatsCache && (Date.now() - this.teamCacheTimestamp) < this.CACHE_DURATION) {\n      console.log('Returning cached team data');\n      return this.teamStatsCache;\n    }\n    \n    console.log('Fetching team data directly from Teams & Budget sheet...');\n    const teamBudgetData = await this.fetchCSVData('Teams & Budget', 'Teams & Budget', true);\n    \n    let teamStats: TeamStats[];\n    \n    if (teamBudgetData.length > 0) {\n      // Parse real team data with flexible column matching\n      teamStats = teamBudgetData.map((row: any) => {\n        // Find columns flexibly based on the actual sheet structure\n        const teamNameKey = Object.keys(row).find(key => \n          this.normalizeHeader(key).includes('team name')\n        );\n        const totalSpentKey = Object.keys(row).find(key => \n          this.normalizeHeader(key).includes('total spent')\n        );\n        const remainingBudgetKey = Object.keys(row).find(key => \n          this.normalizeHeader(key).includes('remaining budget')\n        );\n        const totalPlayerKey = Object.keys(row).find(key => \n          this.normalizeHeader(key).includes('total player')\n        );\n        const foreignPlayersKey = Object.keys(row).find(key => \n          this.normalizeHeader(key).includes('foreign players')\n        );\n        \n        const teamName = teamNameKey ? row[teamNameKey] || '' : '';\n        const totalSpent = this.cleanPrice(totalSpentKey ? row[totalSpentKey] || '0' : '0');\n        const remainingBudget = this.cleanPrice(remainingBudgetKey ? row[remainingBudgetKey] || '0' : '0');\n        const totalPlayers = parseInt(totalPlayerKey ? row[totalPlayerKey] || '0' : '0') || 0;\n        const foreignPlayers = parseInt(foreignPlayersKey ? row[foreignPlayersKey] || '0' : '0') || 0;\n        \n        return {\n          teamId: this.getTeamId(teamName),\n          teamName: teamName,\n          totalSpent: totalSpent,\n          playersCount: totalPlayers,\n          overseasCount: foreignPlayers,\n          fundsRemaining: remainingBudget,\n          totalPoints: 0  // Will be calculated after getting player data\n        };\n      }).filter(team => team.teamName);\n      \n      // Calculate team points by summing player points\n      const players = await this.getPlayers();\n      \n      teamStats = teamStats.map(team => {\n        const teamPlayers = players.filter(p => \n          p.status === 'sold' && \n          (p.team.toLowerCase().includes(team.teamName.toLowerCase()) ||\n           p.team.toLowerCase().includes(team.teamId.toLowerCase()))\n        );\n        \n        const totalPoints = teamPlayers.reduce((sum, player) => sum + (player.points || 0), 0);\n        \n        return {\n          ...team,\n          totalPoints\n        };\n      });\n      \n      console.log(`Loaded ${teamStats.length} teams from Teams & Budget sheet`);\n    } else {\n      console.warn('Could not access Teams & Budget sheet - no team data available');\n      teamStats = [];\n    }\n    \n    // Cache the results\n    this.teamStatsCache = teamStats;\n    this.teamCacheTimestamp = Date.now();\n    console.log(`Cached ${teamStats.length} teams`);\n    \n    return teamStats;\n  }\n\n\n  private getTeamId(teamName: string): string {\n    // Convert team name to ID\n    return teamName.toLowerCase()\n      .replace(/\\s+/g, '')\n      .replace(/[^a-z0-9]/g, '')\n      .substring(0, 10);\n  }\n\n  async getLeaderboard(): Promise<TeamStats[]> {\n    const teamStats = await this.getTeamStats();\n    return teamStats.sort((a, b) => {\n      // Primary sort: Total Team Points (highest first)\n      if (a.totalPoints !== b.totalPoints) {\n        return b.totalPoints - a.totalPoints;\n      }\n      \n      // Secondary sort: If same points, compare remaining budget (highest first)\n      if (a.fundsRemaining !== b.fundsRemaining) {\n        return b.fundsRemaining - a.fundsRemaining;\n      }\n      \n      // Tertiary sort: If same points and budget, alphabetical order\n      return a.teamName.toLowerCase().localeCompare(b.teamName.toLowerCase());\n    });\n  }\n\n  async getSoldPlayersByTeam(teamId: string): Promise<Player[]> {\n    const players = await this.getPlayers();\n    const teams = await this.getTeamConfigs();\n    const team = teams.find((t: Team) => t.id === teamId);\n    \n    if (!team) return [];\n    \n    return players.filter(p => \n      p.status === 'sold' && \n      (p.team.toLowerCase().includes(teamId.toLowerCase()) || \n       p.team.toLowerCase().includes(team.name.toLowerCase()))\n    );\n  }\n\n  async getUnsoldPlayers(): Promise<Player[]> {\n    const players = await this.getPlayers();\n    return players.filter(p => p.status === 'unsold');\n  }\n\n  async getTeamConfigs(): Promise<Team[]> {\n    try {\n      const teamStats = await this.getTeamStats();\n      \n      return teamStats.map(stat => ({\n        id: stat.teamId,\n        name: stat.teamName,\n        logo: this.getTeamLogo(stat.teamName),\n        fundsRemaining: stat.fundsRemaining,\n        overseasPlayers: stat.overseasCount,\n        totalPlayers: stat.playersCount,\n        borderColor: this.getTeamBorderColor(stat.teamName),\n        bgGradient: this.getTeamGradient(stat.teamName),\n      }));\n    } catch (error) {\n      console.error('Error loading team configs:', error);\n      return [];\n    }\n  }\n\n  getTeamLogo(teamName: string): string {\n    // First try to get logo from the new asset mapping\n    const logoUrl = getTeamLogoFromAssets(teamName);\n    if (logoUrl) {\n      return logoUrl;\n    }\n    \n    // Fallback to existing hardcoded logos for teams not in the asset mapping\n    const legacyLogoMap: { [key: string]: string } = {\n      'Mumbai Indians': '/images/teams/mi.png',\n      'Lucknow Giants': '/images/teams/lg.png',\n    };\n    \n    if (legacyLogoMap[teamName]) {\n      return legacyLogoMap[teamName];\n    }\n    \n    // Final fallback to team initials\n    return teamName.split(' ').map(word => word[0]).join('').toUpperCase();\n  }\n\n  getTeamBorderColor(teamName: string): string {\n    const borderMap: { [key: string]: string } = {\n      'Mumbai Indians': 'border-[#045093]',\n      'Lucknow Giants': 'border-[#0097A7]',\n      'Bangalore Tigers': 'border-[#DA1212]',\n      'Kolkata Riders': 'border-[#3E1F47]',\n      'Sunrisers Hyderabad': 'border-[#F26522]',\n      'Delhi Capitals': 'border-[#004C97]',\n      'Chennai Strikers': 'border-[#F9CD00]',\n      'Ahmedabad Giants': 'border-[#0B132B]',\n      'Punjab Kings': 'border-[#C8102E]',\n      'Rajasthan Royals': 'border-[#EA1A8C]',\n      'Indore Titans': 'border-[#0074D9]',\n      'Goa Gladiators': 'border-[#00BCD4]',\n      'Gujarat Titans': 'border-[#0A1931]',\n      'Pune Panthers': 'border-[#5E35B1]',\n      'Kanpur Knights': 'border-[#424242]',\n    };\n    \n    return borderMap[teamName] || 'border-[#666666]';\n  }\n\n  getTeamGradient(teamName: string): string {\n    const gradientMap: { [key: string]: string } = {\n      'Mumbai Indians': 'bg-[linear-gradient(135deg,rgba(4,80,147,0.95)_0%,rgba(2,50,93,0.85)_45%,rgba(1,30,70,0.9)_100%)]',\n      'Lucknow Giants': 'bg-[linear-gradient(135deg,rgba(0,151,167,0.95)_0%,rgba(0,120,135,0.85)_45%,rgba(0,90,110,0.9)_100%)]',\n      'Bangalore Tigers': 'bg-[linear-gradient(135deg,rgba(218,18,18,0.95)_0%,rgba(180,15,15,0.85)_45%,rgba(140,10,10,0.9)_100%)]',\n      'Kolkata Riders': 'bg-[linear-gradient(135deg,rgba(62,31,71,0.95)_0%,rgba(45,20,55,0.85)_45%,rgba(30,15,40,0.9)_100%)]',\n      'Sunrisers Hyderabad': 'bg-[linear-gradient(135deg,rgba(242,101,34,0.95)_0%,rgba(200,80,25,0.85)_45%,rgba(160,65,20,0.9)_100%)]',\n      'Delhi Capitals': 'bg-[linear-gradient(135deg,rgba(0,76,151,0.95)_0%,rgba(0,60,120,0.85)_45%,rgba(0,45,95,0.9)_100%)]',\n      'Chennai Strikers': 'bg-[linear-gradient(135deg,rgba(249,205,0,0.95)_0%,rgba(200,165,0,0.85)_45%,rgba(160,130,0,0.9)_100%)]',\n      'Ahmedabad Giants': 'bg-[linear-gradient(135deg,rgba(11,19,43,0.95)_0%,rgba(8,15,35,0.85)_45%,rgba(5,10,25,0.9)_100%)]',\n      'Punjab Kings': 'bg-[linear-gradient(135deg,rgba(200,16,46,0.95)_0%,rgba(160,10,35,0.85)_45%,rgba(120,8,25,0.9)_100%)]',\n      'Rajasthan Royals': 'bg-[linear-gradient(135deg,rgba(234,26,140,0.95)_0%,rgba(190,20,115,0.85)_45%,rgba(150,15,90,0.9)_100%)]',\n      'Indore Titans': 'bg-[linear-gradient(135deg,rgba(0,116,217,0.95)_0%,rgba(0,90,170,0.85)_45%,rgba(0,70,130,0.9)_100%)]',\n      'Goa Gladiators': 'bg-[linear-gradient(135deg,rgba(0,188,212,0.95)_0%,rgba(0,150,170,0.85)_45%,rgba(0,120,140,0.9)_100%)]',\n      'Gujarat Titans': 'bg-[linear-gradient(135deg,rgba(10,25,49,0.95)_0%,rgba(7,20,40,0.85)_45%,rgba(5,15,30,0.9)_100%)]',\n      'Pune Panthers': 'bg-[linear-gradient(135deg,rgba(94,53,177,0.95)_0%,rgba(75,40,140,0.85)_45%,rgba(60,30,110,0.9)_100%)]',\n      'Kanpur Knights': 'bg-[linear-gradient(135deg,rgba(66,66,66,0.95)_0%,rgba(50,50,50,0.85)_45%,rgba(35,35,35,0.9)_100%)]',\n    };\n    \n    return gradientMap[teamName] || 'bg-[linear-gradient(135deg,rgba(100,100,100,0.95)_0%,rgba(60,60,60,0.85)_45%,rgba(40,40,40,0.9)_100%)]';\n  }\n}\n\nexport const googleSheetsService = new GoogleSheetsService();",
      "size_bytes": 20470
    },
    "client/src/components/ui/accordion.tsx": {
      "content": "import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
      "size_bytes": 1977
    },
    "client/src/components/ui/alert-dialog.tsx": {
      "content": "import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n",
      "size_bytes": 4420
    },
    "client/src/components/ui/alert.tsx": {
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n",
      "size_bytes": 1584
    },
    "client/src/components/ui/aspect-ratio.tsx": {
      "content": "import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n",
      "size_bytes": 140
    },
    "client/src/components/ui/avatar.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
      "size_bytes": 1419
    },
    "client/src/components/ui/badge.tsx": {
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
      "size_bytes": 1128
    },
    "client/src/components/ui/breadcrumb.tsx": {
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n",
      "size_bytes": 2712
    },
    "client/src/components/ui/button.tsx": {
      "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "size_bytes": 1918
    },
    "client/src/components/ui/calendar.tsx": {
      "content": "import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n",
      "size_bytes": 2695
    },
    "client/src/components/ui/card.tsx": {
      "content": "import * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className,\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};\n",
      "size_bytes": 1860
    },
    "client/src/components/ui/carousel.tsx": {
      "content": "import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n",
      "size_bytes": 6210
    },
    "client/src/components/ui/chart.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n",
      "size_bytes": 10481
    },
    "client/src/components/ui/checkbox.tsx": {
      "content": "import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
      "size_bytes": 1056
    },
    "client/src/components/ui/collapsible.tsx": {
      "content": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
      "size_bytes": 329
    },
    "client/src/components/ui/command.tsx": {
      "content": "import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n",
      "size_bytes": 4885
    },
    "client/src/components/ui/context-menu.tsx": {
      "content": "import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n",
      "size_bytes": 7428
    },
    "client/src/components/ui/dialog.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
      "size_bytes": 3848
    },
    "client/src/components/ui/drawer.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n",
      "size_bytes": 3021
    },
    "client/src/components/ui/dropdown-menu.tsx": {
      "content": "import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
      "size_bytes": 7609
    },
    "client/src/components/ui/form.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n",
      "size_bytes": 4120
    },
    "client/src/components/ui/hover-card.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n",
      "size_bytes": 1251
    },
    "client/src/components/ui/input-otp.tsx": {
      "content": "import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n",
      "size_bytes": 2154
    },
    "client/src/components/ui/input.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
      "size_bytes": 791
    },
    "client/src/components/ui/label.tsx": {
      "content": "import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
      "size_bytes": 710
    },
    "client/src/components/ui/menubar.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
      "size_bytes": 8605
    },
    "client/src/components/ui/navigation-menu.tsx": {
      "content": "import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n",
      "size_bytes": 5128
    },
    "client/src/components/ui/pagination.tsx": {
      "content": "import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n",
      "size_bytes": 2751
    },
    "client/src/components/ui/popover.tsx": {
      "content": "import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n",
      "size_bytes": 1280
    },
    "client/src/components/ui/progress.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
      "size_bytes": 791
    },
    "client/src/components/ui/radio-group.tsx": {
      "content": "import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
      "size_bytes": 1467
    },
    "client/src/components/ui/resizable.tsx": {
      "content": "\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n",
      "size_bytes": 1723
    },
    "client/src/components/ui/scroll-area.tsx": {
      "content": "import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
      "size_bytes": 1642
    },
    "client/src/components/ui/select.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
      "size_bytes": 5742
    },
    "client/src/components/ui/separator.tsx": {
      "content": "import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
      "size_bytes": 756
    },
    "client/src/components/ui/sheet.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
      "size_bytes": 4281
    },
    "client/src/components/ui/sidebar.tsx": {
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n",
      "size_bytes": 23567
    },
    "client/src/components/ui/skeleton.tsx": {
      "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
      "size_bytes": 261
    },
    "client/src/components/ui/slider.tsx": {
      "content": "import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
      "size_bytes": 1077
    },
    "client/src/components/ui/switch.tsx": {
      "content": "import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n",
      "size_bytes": 1139
    },
    "client/src/components/ui/table.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
      "size_bytes": 2765
    },
    "client/src/components/ui/tabs.tsx": {
      "content": "import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
      "size_bytes": 1883
    },
    "client/src/components/ui/textarea.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n",
      "size_bytes": 689
    },
    "client/src/components/ui/toast.tsx": {
      "content": "import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
      "size_bytes": 4845
    },
    "client/src/components/ui/toaster.tsx": {
      "content": "import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n",
      "size_bytes": 772
    },
    "client/src/components/ui/toggle-group.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n",
      "size_bytes": 1753
    },
    "client/src/components/ui/toggle.tsx": {
      "content": "import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n",
      "size_bytes": 1527
    },
    "client/src/components/ui/tooltip.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
      "size_bytes": 1209
    },
    "client/src/pages/sections/PlayerAuctionSection.tsx": {
      "content": "import React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport const PlayerAuctionSection = (): JSX.Element => {\n  const teamCards = [\n    { id: 1, color: \"bg-orange-500\" },\n    { id: 2, color: \"bg-blue-500\" },\n    { id: 3, color: \"bg-teal-600\" },\n    { id: 4, color: \"bg-purple-600\" },\n    { id: 5, color: \"bg-orange-400\" },\n    { id: 6, color: \"bg-blue-600\" },\n    { id: 7, color: \"bg-red-600\" },\n    { id: 8, color: \"bg-pink-600\" },\n    { id: 9, color: \"bg-gray-700\" },\n    { id: 10, color: \"bg-red-500\" },\n  ];\n\n  return (\n    <section className=\"flex flex-col items-center p-5 relative w-full\">\n      <div className=\"absolute w-full h-[105.62%] top-0 left-0 bg-[linear-gradient(90deg,rgba(24,24,74,1)_0%,rgba(12,28,158,0.8)_49%,rgba(24,24,74,1)_100%)] opacity-25\" />\n\n      <div className=\"absolute w-full h-full top-0 left-0 shadow-[0px_10px_25px_#329ed94f] bg-[url(/figmaAssets/image-shadow.png)] bg-cover bg-[50%_50%]\" />\n\n      <div className=\"flex flex-col items-center gap-8 relative z-10 w-full max-w-4xl\">\n        <header className=\"flex flex-col items-center\">\n          <h1 className=\"text-center [font-family:'Work_Sans',Helvetica] font-bold text-[34px] leading-[40.8px] tracking-[0]\">\n            <span className=\"text-white\"> IPL 2025 </span>\n            <span className=\"text-[#fe6804]\">Player Auction</span>\n          </h1>\n        </header>\n\n        <div className=\"grid grid-cols-5 gap-4 w-full\">\n          {teamCards.map((team) => (\n            <Card key={team.id} className=\"aspect-square border-0 shadow-lg\">\n              <CardContent\n                className={`${team.color} h-full flex items-center justify-center p-0 rounded-lg`}\n              >\n                <div className=\"w-8 h-8 bg-white rounded-full opacity-80\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n",
      "size_bytes": 1905
    },
    "client/src/pages/sections/PlayerDetailsSection.tsx": {
      "content": "import React, { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useIPLData } from \"@/hooks/useIPLData\";\nimport { PlayerTable } from \"@/components/PlayerTable\";\nimport { LeaderboardView } from \"@/components/LeaderboardView\";\nimport { LoadingPage } from \"@/components/LoadingPage\";\nimport { googleSheetsService, type Team } from \"@/services/googleSheetsService\";\n\nconst navigationTabs = [\n  { id: \"overview\", label: \"OVERVIEW\", active: true },\n  { id: \"sold\", label: \"SOLD PLAYERS\", active: false },\n  { id: \"unsold\", label: \"UNSOLD PLAYERS\", active: false },\n  { id: \"leaderboard\", label: \"LEADERBOARD\", active: false },\n];\n\n// Create a component to display team logo or abbreviation\nconst TeamLogo = ({ logo, name, className = \"\" }: { logo: string; name: string; className?: string }) => {\n  // Check if logo is a file path or abbreviation\n  const isImageLogo = logo.startsWith('/') || logo.startsWith('http');\n  \n  if (isImageLogo) {\n    return (\n      <div\n        className={`w-full h-full aspect-square bg-cover bg-center ${className}`}\n        style={{ backgroundImage: `url(${logo})` }}\n      />\n    );\n  } else {\n    // Display abbreviation text with team-specific gradient\n    const teamGradient = googleSheetsService.getTeamGradient(name);\n    return (\n      <div className={`w-full h-full aspect-square flex items-center justify-center text-2xl font-bold text-white ${teamGradient} ${className}`}>\n        {logo}\n      </div>\n    );\n  }\n};\n\nexport const PlayerDetailsSection = (): JSX.Element => {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [selectedTeam, setSelectedTeam] = useState<string | null>(null);\n  const [, setLocation] = useLocation();\n  const { teamStats, players, leaderboard, isLoading, error, getUnsoldPlayers, getSoldPlayersByTeam } = useIPLData();\n  \n  // Call all hooks unconditionally at the top level\n  const { data: unsoldPlayers, isLoading: loadingUnsold } = getUnsoldPlayers();\n  const { data: soldPlayers, isLoading: loadingPlayers } = getSoldPlayersByTeam(selectedTeam || \"\");\n  \n  // Generate team configs from leaderboard data (already sorted by ranking)\n  const teamConfigs = React.useMemo(() => {\n    if (!leaderboard) return [];\n    return leaderboard.map(stat => ({\n      id: stat.teamId,\n      name: stat.teamName,\n      logo: googleSheetsService.getTeamLogo(stat.teamName),\n      fundsRemaining: stat.fundsRemaining,\n      overseasPlayers: stat.overseasCount,\n      totalPlayers: stat.playersCount,\n      borderColor: googleSheetsService.getTeamBorderColor(stat.teamName),\n      bgGradient: googleSheetsService.getTeamGradient(stat.teamName),\n    }));\n  }, [leaderboard]);\n  \n  // Show loading page only for initial load, not background refreshes\n  const shouldShowLoading = () => {\n    switch (activeTab) {\n      case \"sold\":\n        return !players && isLoading; // Only show if no cached data exists\n      case \"unsold\":\n        return !unsoldPlayers && loadingUnsold; // Only show if no cached data exists\n      case \"leaderboard\":\n        return !leaderboard && isLoading; // Only show if no cached data exists\n      default: // overview\n        return !leaderboard && isLoading; // Only show if no cached data exists\n    }\n  };\n\n  if (shouldShowLoading()) {\n    return <LoadingPage />;\n  }\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const handleTeamClick = (teamId: string) => {\n    setLocation(`/team/${teamId}`);\n  };\n\n  const renderContent = () => {\n    if (error) {\n      return (\n        <div className=\"flex items-center justify-center h-96\">\n          <div className=\"text-red-400 text-lg\">Error loading data: {error.message}</div>\n        </div>\n      );\n    }\n\n    switch (activeTab) {\n      case \"sold\":\n        // Show all sold players with team filtering, respecting pre-selected team\n        const allSoldPlayers = players?.filter(p => p.status === 'sold') || [];\n        const selectedTeamConfig = teamConfigs.find(team => team.id === selectedTeam);\n        const teamDisplayName = selectedTeamConfig ? selectedTeamConfig.name : selectedTeam;\n        return (\n          <PlayerTable \n            players={allSoldPlayers} \n            title={selectedTeam ? `${teamDisplayName} Sold Players` : \"Sold Players\"}\n            showTeam={true}\n            showTeamFilter={true}\n            teams={teamConfigs}\n            selectedTeamFilter={selectedTeam}\n            onTeamFilter={(teamId) => setSelectedTeam(teamId)}\n          />\n        );\n        \n      case \"unsold\":\n        if (loadingUnsold) {\n          return <div className=\"text-wwwiplt-2-0comwhite\">Loading unsold players...</div>;\n        }\n        // Ensure only truly unsold players are shown here\n        const confirmedUnsoldPlayers = (unsoldPlayers || []).filter(p => p.status === 'unsold');\n        return (\n          <PlayerTable \n            players={confirmedUnsoldPlayers} \n            title=\"Unsold Players\" \n            showTeam={false}\n            showTeamFilter={false}\n            defaultSortField=\"sheetOrder\"\n            defaultSortDirection=\"asc\"\n          />\n        );\n        \n      case \"leaderboard\":\n        return <LeaderboardView leaderboard={leaderboard || []} />;\n        \n      default: // overview\n        if (teamStats && teamStats.length > 0) {\n          return (\n            <main className=\"grid grid-cols-[repeat(auto-fit,minmax(240px,1fr))] gap-4 sm:gap-6 content-start\">\n              {teamConfigs.map((teamConfig: Team) => {\n              const teamStat = leaderboard?.find(stat => stat.teamId === teamConfig.id);\n              return (\n                <motion.div\n                  key={teamConfig.id}\n                  whileHover={{ \n                    scale: 1.05,\n                    y: -8,\n                    transition: { duration: 0.2, ease: \"easeOut\" }\n                  }}\n                  whileTap={{ scale: 0.98 }}\n                >\n                  <Card\n                    className={`h-full min-w-0 flex flex-col items-center gap-6 p-3 rounded-3xl overflow-hidden border-2 border-solid ${teamConfig.borderColor} ${teamConfig.bgGradient} cursor-pointer hover:ring-2 hover:ring-white/20 transition-all duration-200`}\n                    onClick={() => handleTeamClick(teamConfig.id)}\n                  >\n                  <div className=\"flex flex-col items-center gap-2\">\n                    <div className=\"flex w-20 h-20 items-center justify-center rounded-full overflow-hidden border-2 border-white/20\">\n                      <TeamLogo logo={teamConfig.logo} name={teamConfig.name} />\n                    </div>\n                    <div className=\"text-center\">\n                      <span className=\"[font-family:'Work_Sans',Helvetica] font-semibold text-white text-sm tracking-[0] leading-5\">\n                        {teamConfig.name}\n                      </span>\n                    </div>\n                  </div>\n\n                  <CardContent className=\"flex flex-col items-start w-full bg-wwwiplt20comblack-3 p-0 flex-1\">\n                    <div className=\"flex flex-col items-start pb-3 w-full border-b border-solid border-[#ffffff1a]\">\n                      <div className=\"flex flex-col items-center py-2 w-full\">\n                        <span className=\"[font-family:'Work_Sans',Helvetica] font-normal text-wwwiplt-2-0comwhite text-sm text-center tracking-[0] leading-6\">\n                          Funds Remaining\n                        </span>\n                      </div>\n\n                      <div className=\"flex flex-col items-center w-full\">\n                        <span className=\"[font-family:'Work_Sans',Helvetica] font-bold text-wwwiplt-2-0comwhite text-lg text-center tracking-[0] leading-7\">\n                          {teamStat ? formatCurrency(teamStat.fundsRemaining) : '₹0'}\n                        </span>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-stretch justify-center w-full flex-1\">\n                      <div className=\"pr-2 border-r border-solid border-[#ffffff1a] flex flex-col justify-between flex-1\">\n                        <div className=\"flex flex-col items-center py-2 w-full\">\n                          <span className=\"[font-family:'Work_Sans',Helvetica] font-normal text-wwwiplt-2-0comwhite text-sm text-center tracking-[0] leading-6\">\n                            Overseas Players\n                          </span>\n                        </div>\n\n                        <div className=\"flex flex-col items-center w-full\">\n                          <span className=\"[font-family:'Work_Sans',Helvetica] font-bold text-wwwiplt-2-0comwhite text-lg text-center tracking-[0] leading-7\">\n                            {teamStat?.overseasCount || 0}\n                          </span>\n                        </div>\n                      </div>\n\n                      <div className=\"pl-2 flex flex-col justify-between flex-1\">\n                        <div className=\"flex flex-col items-center py-2 w-full\">\n                          <span className=\"[font-family:'Work_Sans',Helvetica] font-normal text-wwwiplt-2-0comwhite text-sm text-center tracking-[0] leading-6\">\n                            Total Players\n                          </span>\n                        </div>\n\n                        <div className=\"flex flex-col items-center w-full\">\n                          <span className=\"[font-family:'Work_Sans',Helvetica] font-bold text-wwwiplt-2-0comwhite text-lg text-center tracking-[0] leading-7\">\n                            {teamStat?.playersCount || 0}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                </motion.div>\n              );\n            })}\n            </main>\n          );\n        } else {\n          return (\n            <div className=\"flex items-center justify-center h-32\">\n              <div className=\"text-wwwiplt-2-0comwhite text-lg\">No teams available</div>\n            </div>\n          );\n        }\n    }\n  };\n\n  return (\n    <motion.div \n      className=\"bg-[#18184a] w-full min-h-screen\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.6, ease: \"easeOut\" }}\n    >\n      {/* Unified Header */}\n      <header \n        className=\"sticky top-0 z-50 w-full backdrop-blur bg-[#0b2a7d]/70 border-b border-white/10\"\n        style={{\n          backgroundImage: `linear-gradient(90deg, rgba(24,24,74,0.9) 0%, rgba(12,28,158,0.8) 49%, rgba(24,24,74,0.9) 100%)`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center'\n        }}\n      >\n        <div className=\"w-full px-4 sm:px-6 md:px-8 lg:px-12 py-3 md:py-4\">\n          <div className=\"flex flex-col md:flex-row items-start md:items-center justify-between gap-3 md:gap-4\">\n            {/* Title Section */}\n            <div className=\"flex items-center gap-2 md:gap-4\">\n              <h1 \n                className=\"[font-family:'Work_Sans',Helvetica] font-bold text-[20px] sm:text-[24px] md:text-[28px] lg:text-[34px] leading-[24px] sm:leading-[28px] md:leading-[34px] lg:leading-[40.8px] tracking-[0]\"\n                data-testid=\"text-title\"\n              >\n                <span className=\"text-white\"> IPL 2025 </span>\n                <span className=\"text-[#fe6804]\">Player Auction</span>\n              </h1>\n            </div>\n\n            {/* Navigation and Brand */}\n            <div className=\"flex flex-col md:flex-row items-start md:items-center gap-3 md:gap-4 w-full md:w-auto\">\n              <nav \n                className=\"flex items-center gap-1 md:gap-2 overflow-x-auto w-full md:w-auto scrollbar-hide\"\n                aria-label=\"Primary navigation\"\n                role=\"navigation\"\n              >\n                <ul className=\"flex items-center gap-1 md:gap-2 min-w-max\" role=\"tablist\">\n                  {navigationTabs.map((tab) => (\n                    <li key={tab.id} role=\"none\">\n                      <div>\n                        <Button\n                          variant=\"ghost\"\n                          role=\"tab\"\n                          aria-selected={activeTab === tab.id}\n                          aria-controls={`panel-${tab.id}`}\n                          data-testid={`button-tab-${tab.id}`}\n                          className={`h-auto px-2 md:px-3 lg:px-4 py-1.5 md:py-2 rounded-full text-xs md:text-sm font-semibold transition-all duration-200 focus-visible:ring-2 focus-visible:ring-[#fe6804] focus-visible:ring-offset-2 focus-visible:ring-offset-[#18184a] whitespace-nowrap ${\n                            activeTab === tab.id\n                              ? \"bg-[linear-gradient(180deg,rgba(255,107,0,1)_0%,rgba(239,65,35,1)_100%)] text-white border-b-2 border-[#fe6804]\"\n                              : \"bg-white/10 border border-[#90b6ff] text-white hover:text-white hover:bg-white/20 hover:border-[#fe6804]/50\"\n                          }`}\n                          onClick={() => setActiveTab(tab.id)}\n                        >\n                          {tab.label}\n                        </Button>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </nav>\n\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Dashboard Section */}\n      <section className=\"w-full bg-[#18184a] p-4 sm:p-6 md:p-8 lg:p-[30px_47px] pt-6 md:pt-8\">\n        <div className=\"w-full bg-wwwiplt20comconcrete-80 rounded-[16px] md:rounded-[22.47px] backdrop-blur-[28.09px] backdrop-brightness-[100%] [-webkit-backdrop-filter:blur(28.09px)_brightness(100%)] p-4 sm:p-6 md:p-[22px]\">\n          <AnimatePresence mode=\"wait\">\n            <motion.div \n              key={activeTab}\n              id={`panel-${activeTab}`} \n              role=\"tabpanel\" \n              aria-labelledby={`tab-${activeTab}`}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              transition={{ duration: 0.3, ease: \"easeInOut\" }}\n            >\n              {renderContent()}\n            </motion.div>\n          </AnimatePresence>\n        </div>\n      </section>\n    </motion.div>\n  );\n};\n",
      "size_bytes": 14521
    },
    ".local/state/replit/agent/progress_tracker.md": {
      "content": "[x] 1. Install the required packages - npm install completed successfully (tsx dependency now available)\n[x] 2. Update Player interface and Google Sheets service to support player images\n[x] 3. Create PlayerCards component for team page display\n[x] 4. Replace table with card layout in TeamDashboard  \n[x] 5. Test and verify the migration is complete\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Updated team colors to use proper team-specific gradients from overview\n[x] 5. Made only rank numbers square while keeping team logos circular as requested\n[x] 6. Project migration completed successfully - application running without errors\n[x] 7. Fixed team page issues: Created /team route with team cards, removed Playing XI text and icons, updated foreign player limit to 7",
      "size_bytes": 857
    },
    "client/src/pages/TeamDashboard.tsx": {
      "content": "import React, { useState, useEffect } from 'react';\nimport { useRoute, Link } from 'wouter';\nimport { motion } from 'framer-motion';\nimport { queryClient } from '@/lib/queryClient';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { PlayerCards } from '@/components/PlayerCards';\nimport { useIPLData } from '@/hooks/useIPLData';\nimport { LoadingPage } from '@/components/LoadingPage';\nimport { googleSheetsService, type Team } from '@/services/googleSheetsService';\nimport { ArrowLeft, RefreshCw } from 'lucide-react';\n\n// Team Logo component\nconst TeamLogo = ({ logo, name, className = \"\" }: { logo: string; name: string; className?: string }) => {\n  const isImageLogo = logo.startsWith('/') || logo.startsWith('http');\n  \n  if (isImageLogo) {\n    return (\n      <div\n        className={`w-16 h-16 md:w-20 md:h-20 aspect-square bg-cover bg-center rounded-full flex-shrink-0 ${className}`}\n        style={{ backgroundImage: `url(${logo})` }}\n      />\n    );\n  } else {\n    const teamGradient = googleSheetsService.getTeamGradient(name);\n    return (\n      <div className={`w-16 h-16 md:w-20 md:h-20 aspect-square flex items-center justify-center rounded-full flex-shrink-0 ${teamGradient} text-white text-lg md:text-xl font-bold ${className}`}>\n        {logo}\n      </div>\n    );\n  }\n};\n\nexport const TeamDashboard = () => {\n  const [, params] = useRoute('/team/:teamId');\n  const teamId = params?.teamId;\n  \n  const [teamConfig, setTeamConfig] = useState<Team | null>(null);\n  const [teamRank, setTeamRank] = useState<number | null>(null);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const { teamStats, isLoading, error, getSoldPlayersByTeam, refreshAllData } = useIPLData();\n  const { data: soldPlayers, isLoading: loadingPlayers } = getSoldPlayersByTeam(teamConfig?.id || \"\");\n  \n  useEffect(() => {\n    if (teamId) {\n      googleSheetsService.getTeamConfigs().then(configs => {\n        const team = configs.find(config => config.id === teamId);\n        setTeamConfig(team || null);\n      });\n    }\n  }, [teamId]);\n\n  useEffect(() => {\n    // Calculate team rank when teamStats and teamConfig are available\n    if (teamStats && teamConfig) {\n      googleSheetsService.getLeaderboard().then(leaderboard => {\n        const teamIndex = leaderboard.findIndex(team => team.teamId === teamConfig.id);\n        setTeamRank(teamIndex !== -1 ? teamIndex + 1 : null);\n      });\n    }\n  }, [teamStats, teamConfig]);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  if (isLoading || !teamConfig) {\n    return <LoadingPage />;\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-[#0f1629] p-4 md:p-6\">\n        <div className=\"flex items-center justify-center h-96\">\n          <div className=\"text-red-400 text-lg\">Error loading team data: {error.message}</div>\n        </div>\n      </div>\n    );\n  }\n\n  const teamStat = teamStats?.find(stat => stat.teamId === teamConfig.id);\n  const teamPlayers = soldPlayers || [];\n  const teamGradient = googleSheetsService.getTeamGradient(teamConfig.name);\n  const teamBorderColor = googleSheetsService.getTeamBorderColor(teamConfig.name);\n  const startingBudget = 100000; // TODO: Make this dynamic from Teams & Budget sheet\n\n  return (\n    <motion.div \n      className=\"min-h-screen bg-[#0f1629] p-3 md:p-6\"\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5, ease: \"easeOut\" }}\n    >\n      <div className=\"max-w-7xl mx-auto space-y-4 md:space-y-6\">\n        {/* Header with Back Button and Refresh Button */}\n        <div className=\"flex items-center justify-between mb-4 md:mb-6\">\n          <Link href=\"/\">\n            <Button data-testid=\"button-back-overview\" variant=\"outline\" size=\"sm\" className=\"bg-[#1a2332] border-[#2a3441] text-gray-300 hover:bg-[#1a2332] hover:text-gray-300 hover:border-[#2a3441] text-xs md:text-sm\">\n              <ArrowLeft className=\"w-3 h-3 md:w-4 md:h-4 mr-1 md:mr-2\" />\n              Back to Overview\n            </Button>\n          </Link>\n          <Button \n            data-testid=\"button-refresh-data\" \n            variant=\"outline\" \n            size=\"sm\" \n            className=\"bg-[#1a2332] border-[#2a3441] text-gray-300 hover:bg-[#1a2332] hover:text-gray-300 hover:border-[#2a3441] text-xs md:text-sm\"\n            disabled={isRefreshing}\n            onClick={async () => {\n              setIsRefreshing(true);\n              try {\n                refreshAllData();\n                // Also refresh the team-specific sold players data\n                if (teamConfig?.id) {\n                  queryClient.invalidateQueries({ queryKey: ['soldPlayers', teamConfig.id] });\n                }\n                queryClient.invalidateQueries({ queryKey: ['unsoldPlayers'] });\n                // Wait a moment for the refresh to complete\n                await new Promise(resolve => setTimeout(resolve, 1000));\n              } finally {\n                setIsRefreshing(false);\n              }\n            }}\n          >\n            <RefreshCw className={`w-3 h-3 md:w-4 md:h-4 mr-1 md:mr-2 transition-transform duration-500 ${isRefreshing ? 'animate-spin' : ''}`} />\n            Refresh Data\n          </Button>\n        </div>\n\n        {/* Team Header */}\n        <Card className={`bg-[#0f1629] border-2 ${teamBorderColor} ${teamGradient} bg-opacity-95`}>\n          <CardContent className=\"p-4 md:p-6\">\n            <div className=\"flex flex-col sm:flex-row items-center gap-4 md:gap-6\">\n              <TeamLogo logo={teamConfig.logo} name={teamConfig.name} />\n              <div className=\"text-center sm:text-left flex-1\">\n                <h1 data-testid=\"text-team-name\" className=\"text-xl md:text-3xl font-bold text-white mb-2\">{teamConfig.name}</h1>\n                <div className=\"text-white/90 space-y-1\">\n                  <p className=\"text-sm md:text-base font-medium\">Squad Size: Max 15 players</p>\n                  <p className=\"text-xs md:text-sm text-yellow-300 font-medium\">🏆 Qualification: Top 8 teams advance</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Team Statistics Grid */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-5 gap-3 md:gap-4\">\n          <Card className=\"bg-[#0f1629] border-[#1a2332] hover:border-[#2a3441] transition-colors\">\n            <CardContent className=\"p-3 md:p-4\">\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-gray-300 text-xs md:text-sm\">Starting Budget</p>\n                <p data-testid=\"text-starting-budget\" className=\"text-lg md:text-2xl font-bold text-wwwiplt-2-0comwhite\">{formatCurrency(startingBudget)}</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-[#0f1629] border-[#1a2332] hover:border-orange-400/30 transition-colors\">\n            <CardContent className=\"p-3 md:p-4\">\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-gray-300 text-xs md:text-sm\">Current Rank</p>\n                <p data-testid=\"text-current-rank\" className=\"text-lg md:text-2xl font-bold text-orange-400\">\n                  {teamRank ? `#${teamRank}` : '--'}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-[#0f1629] border-[#1a2332] hover:border-green-400/30 transition-colors\">\n            <CardContent className=\"p-3 md:p-4\">\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-gray-300 text-xs md:text-sm\">Total Spent</p>\n                <p data-testid=\"text-total-spent\" className=\"text-lg md:text-2xl font-bold text-green-400\">{teamStat ? formatCurrency(teamStat.totalSpent) : formatCurrency(0)}</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-[#0f1629] border-[#1a2332] hover:border-blue-400/30 transition-colors\">\n            <CardContent className=\"p-3 md:p-4\">\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-gray-300 text-xs md:text-sm\">Remaining Budget</p>\n                <p data-testid=\"text-remaining-budget\" className=\"text-lg md:text-2xl font-bold text-blue-400\">{teamStat ? formatCurrency(teamStat.fundsRemaining) : formatCurrency(startingBudget)}</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-[#0f1629] border-[#1a2332] hover:border-yellow-400/30 transition-colors\">\n            <CardContent className=\"p-3 md:p-4\">\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-gray-300 text-xs md:text-sm\">Team Points</p>\n                <p data-testid=\"text-team-points\" className=\"text-lg md:text-2xl font-bold text-yellow-400\">{teamStat?.totalPoints || 0}</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Team Composition */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3 md:gap-4\">\n          <Card className=\"bg-[#0f1629] border-[#1a2332] hover:border-[#2a3441] transition-colors\">\n            <CardContent className=\"p-3 md:p-4\">\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-gray-300 text-xs md:text-sm\">Total Players</p>\n                <p data-testid=\"text-total-players\" className=\"text-xl md:text-2xl font-bold text-wwwiplt-2-0comwhite\">{teamStat?.playersCount || 0}/15</p>\n                <p className=\"text-xs text-gray-400\">Need {Math.max(0, 11 - (teamStat?.playersCount || 0))} more for eligibility</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-[#0f1629] border-[#1a2332] hover:border-[#2a3441] transition-colors\">\n            <CardContent className=\"p-3 md:p-4\">\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-gray-300 text-xs md:text-sm\">Foreign Players</p>\n                <p data-testid=\"text-foreign-players\" className=\"text-xl md:text-2xl font-bold text-wwwiplt-2-0comwhite\">{teamStat?.overseasCount || 0}/7</p>\n                <p className=\"text-xs text-gray-400\">Can add {Math.max(0, 7 - (teamStat?.overseasCount || 0))} more</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`bg-[#0f1629] border-[#1a2332] hover:border-[#2a3441] transition-colors ${(teamStat?.playersCount || 0) >= 11 ? 'ring-2 ring-green-400/30' : 'ring-2 ring-red-400/30'}`}>\n            <CardContent className=\"p-3 md:p-4\">\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-gray-300 text-xs md:text-sm\">Squad Status</p>\n                <p data-testid=\"text-squad-status\" className={`text-lg md:text-xl font-bold ${(teamStat?.playersCount || 0) >= 11 ? 'text-green-400' : 'text-red-400'}`}>\n                  {(teamStat?.playersCount || 0) >= 11 ? 'Eligible' : 'Not Eligible'}\n                </p>\n                <p className=\"text-xs text-gray-400\">Min: 11 players required</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Players Table */}\n        <div className=\"space-y-4\">\n          {loadingPlayers ? (\n            <Card className=\"bg-[#0f1629] border-[#1a2332]\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center text-gray-300\">Loading team players...</div>\n              </CardContent>\n            </Card>\n          ) : (\n            <PlayerCards \n              players={teamPlayers} \n              title={`${teamConfig.name} Squad (${teamPlayers.length} players)`}\n            />\n          )}\n        </div>\n      </div>\n    </motion.div>\n  );\n};",
      "size_bytes": 11850
    },
    "client/src/pages/TeamsListing.tsx": {
      "content": "import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { motion } from 'framer-motion';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { useIPLData } from '@/hooks/useIPLData';\nimport { LoadingPage } from '@/components/LoadingPage';\nimport { googleSheetsService, type Team } from '@/services/googleSheetsService';\nimport { ArrowLeft } from 'lucide-react';\n\n// Team Logo component\nconst TeamLogo = ({ logo, name, className = \"\" }: { logo: string; name: string; className?: string }) => {\n  const isImageLogo = logo.startsWith('/') || logo.startsWith('http');\n  \n  if (isImageLogo) {\n    return (\n      <div\n        className={`w-full h-full aspect-square bg-cover bg-center ${className}`}\n        style={{ backgroundImage: `url(${logo})` }}\n      />\n    );\n  } else {\n    const teamGradient = googleSheetsService.getTeamGradient(name);\n    return (\n      <div className={`w-full h-full aspect-square flex items-center justify-center text-2xl font-bold text-white ${teamGradient} ${className}`}>\n        {logo}\n      </div>\n    );\n  }\n};\n\nexport const TeamsListing = () => {\n  const [teamConfigs, setTeamConfigs] = useState<Team[]>([]);\n  const [, setLocation] = useLocation();\n  const { teamStats, isLoading, error } = useIPLData();\n\n  useEffect(() => {\n    googleSheetsService.getTeamConfigs().then(setTeamConfigs);\n  }, []);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const handleTeamClick = (teamId: string) => {\n    setLocation(`/team/${teamId}`);\n  };\n\n  if (isLoading) {\n    return <LoadingPage />;\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-[#0f1629] p-4 md:p-6\">\n        <div className=\"flex items-center justify-center h-96\">\n          <div className=\"text-red-400 text-lg\">Error loading teams: {error.message}</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <motion.div \n      className=\"min-h-screen bg-[#0f1629] p-3 md:p-6\"\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5, ease: \"easeOut\" }}\n    >\n      <div className=\"max-w-7xl mx-auto space-y-4 md:space-y-6\">\n        {/* Header with Back Button */}\n        <div className=\"flex items-center gap-4 mb-4 md:mb-6\">\n          <Button \n            data-testid=\"button-back-overview\"\n            variant=\"outline\" \n            size=\"sm\" \n            className=\"bg-[#1a2332] border-[#2a3441] text-gray-300 hover:bg-[#1a2332] hover:text-gray-300 hover:border-[#2a3441] text-xs md:text-sm\"\n            onClick={() => setLocation('/')}\n          >\n            <ArrowLeft className=\"w-3 h-3 md:w-4 md:h-4 mr-1 md:mr-2\" />\n            Back to Overview\n          </Button>\n        </div>\n\n        {/* Page Title */}\n        <div className=\"text-center mb-6 md:mb-8\">\n          <h1 className=\"text-2xl md:text-4xl font-bold text-white mb-2\">IPL Teams</h1>\n          <p className=\"text-gray-300 text-sm md:text-base\">Select a team to view their dashboard</p>\n        </div>\n\n        {/* Teams Grid */}\n        {teamConfigs.length === 0 ? (\n          <div className=\"flex items-center justify-center h-32\">\n            <div className=\"text-wwwiplt-2-0comwhite text-lg\">Loading teams from Google Sheets...</div>\n          </div>\n        ) : (\n          <main className=\"grid grid-cols-[repeat(auto-fit,minmax(240px,1fr))] gap-4 sm:gap-6 content-start\">\n            {teamConfigs.map((teamConfig: Team, index) => {\n              const teamStat = teamStats?.find(stat => stat.teamId === teamConfig.id);\n              return (\n                <motion.div\n                  key={teamConfig.id}\n                  initial={{ opacity: 0, y: 30 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ \n                    duration: 0.4, \n                    delay: index * 0.1,\n                    ease: \"easeOut\" \n                  }}\n                  whileHover={{ scale: 1.02 }}\n                  whileTap={{ scale: 0.98 }}\n                >\n                  <Card\n                    className={`h-full min-w-0 flex flex-col items-center gap-6 p-3 rounded-3xl overflow-hidden border-2 border-solid ${teamConfig.borderColor} ${teamConfig.bgGradient} cursor-pointer hover:ring-2 hover:ring-white/20 transition-all duration-200`}\n                    onClick={() => handleTeamClick(teamConfig.id)}\n                  >\n                  <div className=\"flex flex-col items-center gap-2\">\n                    <div className=\"flex w-20 h-20 items-center justify-center rounded-full overflow-hidden border-2 border-white/20\">\n                      <TeamLogo logo={teamConfig.logo} name={teamConfig.name} />\n                    </div>\n                    <div className=\"text-center\">\n                      <span className=\"[font-family:'Work_Sans',Helvetica] font-semibold text-white text-sm tracking-[0] leading-5\">\n                        {teamConfig.name}\n                      </span>\n                    </div>\n                  </div>\n\n                  <CardContent className=\"flex flex-col items-start w-full bg-wwwiplt20comblack-3 p-0 flex-1\">\n                    <div className=\"flex flex-col items-start pb-3 w-full border-b border-solid border-[#ffffff1a]\">\n                      <div className=\"flex flex-col items-center py-2 w-full\">\n                        <span className=\"[font-family:'Work_Sans',Helvetica] font-normal text-wwwiplt-2-0comwhite text-sm text-center tracking-[0] leading-6\">\n                          Funds Remaining\n                        </span>\n                      </div>\n\n                      <div className=\"flex flex-col items-center w-full\">\n                        <span className=\"[font-family:'Work_Sans',Helvetica] font-bold text-wwwiplt-2-0comwhite text-lg text-center tracking-[0] leading-7\">\n                          {teamStat ? formatCurrency(teamStat.fundsRemaining) : '₹0'}\n                        </span>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-stretch justify-center w-full flex-1\">\n                      <div className=\"pr-2 border-r border-solid border-[#ffffff1a] flex flex-col justify-between flex-1\">\n                        <div className=\"flex flex-col items-center py-2 w-full\">\n                          <span className=\"[font-family:'Work_Sans',Helvetica] font-normal text-wwwiplt-2-0comwhite text-sm text-center tracking-[0] leading-6\">\n                            Overseas Players\n                          </span>\n                        </div>\n\n                        <div className=\"flex flex-col items-center w-full\">\n                          <span className=\"[font-family:'Work_Sans',Helvetica] font-bold text-wwwiplt-2-0comwhite text-lg text-center tracking-[0] leading-7\">\n                            {teamStat?.overseasCount || 0}\n                          </span>\n                        </div>\n                      </div>\n\n                      <div className=\"pl-2 flex flex-col justify-between flex-1\">\n                        <div className=\"flex flex-col items-center py-2 w-full\">\n                          <span className=\"[font-family:'Work_Sans',Helvetica] font-normal text-wwwiplt-2-0comwhite text-sm text-center tracking-[0] leading-6\">\n                            Total Players\n                          </span>\n                        </div>\n\n                        <div className=\"flex flex-col items-center w-full\">\n                          <span className=\"[font-family:'Work_Sans',Helvetica] font-bold text-wwwiplt-2-0comwhite text-lg text-center tracking-[0] leading-7\">\n                            {teamStat?.playersCount || 0}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                  </Card>\n                </motion.div>\n              );\n            })}\n          </main>\n        )}\n      </div>\n    </motion.div>\n  );\n};",
      "size_bytes": 8142
    },
    "client/src/components/PlayerCards.tsx": {
      "content": "import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Player } from '@/services/googleSheetsService';\nimport { PlayerDetailsModal } from './PlayerDetailsModal';\nimport { Plane } from 'lucide-react';\n\ninterface PlayerCardsProps {\n  players: Player[];\n  title: string;\n}\n\ninterface GroupedPlayers {\n  [role: string]: Player[];\n}\n\n// Player Card component\nconst PlayerCard = ({ player, onClick }: { player: Player; onClick: () => void }) => {\n  const hasImage = player.images && player.images.trim() !== '';\n  \n  return (\n    <motion.div \n      className=\"flex flex-col items-center group cursor-pointer\" \n      onClick={onClick} \n      data-testid={`card-player-${player.name.replace(/\\s+/g, '-').toLowerCase()}`}\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      transition={{ duration: 0.2 }}\n    >\n      <div className=\"relative w-28 h-28 md:w-36 md:h-36 mb-3 overflow-hidden rounded-lg bg-gray-800 border-2 border-gray-700 group-hover:border-blue-400 transition-colors\">\n        {hasImage ? (\n          <img\n            src={player.images}\n            alt={player.name}\n            className=\"w-full h-full object-cover\"\n            onError={(e) => {\n              // Fallback to initials if image fails to load\n              const target = e.target as HTMLImageElement;\n              target.style.display = 'none';\n              target.nextElementSibling?.classList.remove('hidden');\n            }}\n          />\n        ) : null}\n        <div className={`${hasImage ? 'hidden' : 'flex'} absolute inset-0 items-center justify-center bg-gray-700 text-white font-bold text-base md:text-lg`}>\n          {player.name.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2)}\n        </div>\n      </div>\n      <div className=\"flex items-center justify-center gap-1 max-w-36\">\n        <span className=\"text-white text-base md:text-lg font-medium text-center truncate\">\n          {player.name}\n        </span>\n        {player.overseas && (\n          <Plane className=\"w-4 h-4 text-blue-400 flex-shrink-0\" />\n        )}\n      </div>\n    </motion.div>\n  );\n};\n\n// Role Section component\nconst RoleSection = ({ role, players, onPlayerClick }: { role: string; players: Player[]; onPlayerClick: (player: Player) => void }) => {\n  if (players.length === 0) return null;\n  \n  return (\n    <div className=\"mb-6\">\n      <h3 className=\"text-lg md:text-xl font-bold text-white mb-4 capitalize\">\n        {role === 'wicketkeeper' ? 'Wicket Keeper' : \n         role === 'allrounder' ? 'All Rounder' : role}\n      </h3>\n      <div className=\"flex flex-wrap gap-8 md:gap-10\">\n        {players.map((player, index) => (\n          <motion.div\n            key={`${player.name}-${index}`}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ \n              duration: 0.4, \n              delay: index * 0.1,\n              ease: \"easeOut\" \n            }}\n          >\n            <PlayerCard \n              player={player} \n              onClick={() => onPlayerClick(player)}\n            />\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport const PlayerCards: React.FC<PlayerCardsProps> = ({ players, title }) => {\n  const [selectedPlayer, setSelectedPlayer] = useState<Player | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  \n  const handlePlayerClick = (player: Player) => {\n    setSelectedPlayer(player);\n    setIsModalOpen(true);\n  };\n  \n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedPlayer(null);\n  };\n  \n  // Group players by role\n  const groupedPlayers: GroupedPlayers = players.reduce((acc, player) => {\n    const role = player.role?.toLowerCase().trim() || 'other';\n    \n    // Normalize role names\n    let normalizedRole = role;\n    if (role.includes('batsman') || role.includes('batter') || role.includes('bat')) {\n      normalizedRole = 'batsman';\n    } else if (role.includes('bowler') || role.includes('bowl')) {\n      normalizedRole = 'bowler';\n    } else if (role.includes('allrounder') || role.includes('all-rounder') || role.includes('all rounder') || role === 'ar') {\n      normalizedRole = 'allrounder';\n    } else if (role.includes('wicketkeeper') || role.includes('wicket-keeper') || role.includes('wicket keeper') || role === 'wk') {\n      normalizedRole = 'wicketkeeper';\n    }\n    \n    if (!acc[normalizedRole]) {\n      acc[normalizedRole] = [];\n    }\n    acc[normalizedRole].push(player);\n    return acc;\n  }, {} as GroupedPlayers);\n\n  // Define role order for consistent display\n  const roleOrder = ['batsman', 'bowler', 'allrounder', 'wicketkeeper', 'other'];\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5, ease: \"easeOut\" }}\n    >\n      <Card className=\"bg-[#0f1629] border-[#1a2332]\">\n      <CardHeader>\n        <CardTitle className=\"text-white text-xl md:text-2xl\">{title}</CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-4 md:p-6\">\n        {players.length === 0 ? (\n          <div className=\"text-center text-gray-400 py-8\">\n            No players in this team yet\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {roleOrder.map(role => (\n              <RoleSection \n                key={role} \n                role={role} \n                players={groupedPlayers[role] || []} \n                onPlayerClick={handlePlayerClick}\n              />\n            ))}\n          </div>\n        )}\n      </CardContent>\n      \n      {/* Player Details Modal */}\n      <PlayerDetailsModal \n        player={selectedPlayer}\n        isOpen={isModalOpen}\n        onClose={handleCloseModal}\n      />\n    </Card>\n    </motion.div>\n  );\n};",
      "size_bytes": 5855
    },
    "client/src/assets/teamLogos.ts": {
      "content": "// Team logo paths from organized public directory\nconst AGLogo = '/images/teams/ag.png';\nconst CSLogo = '/images/teams/csk.jpg';\nconst DCLogo = '/images/teams/dc.jpg';\nconst GBLogo = '/images/teams/gb.png';\nconst GGLogo = '/images/teams/gg.png';\nconst GTLogo = '/images/teams/gt.png';\nconst ITLogo = '/images/teams/it.png';\nconst PBKSLogo = '/images/teams/pbks.webp';\nconst KKRLogo = '/images/teams/kkr.jpeg';\nconst KPLogo = '/images/teams/kp.png';\nconst PPLogo = '/images/teams/pp.png';\nconst RCBLogo = '/images/teams/rcb.jpg';\nconst SHLogo = '/images/teams/srh.webp';\nconst RRLogo = '/images/teams/rr.png';\n\n// Team logo mapping by team code/short name\nconst logosByCode: Record<string, string> = {\n  'ag': AGLogo,\n  'cs': CSLogo,\n  'csk': CSLogo,\n  'dc': DCLogo,\n  'gb': GBLogo,\n  'gg': GGLogo,\n  'gt': GTLogo,\n  'it': ITLogo,\n  'pbks': PBKSLogo,\n  'kkr': KKRLogo,\n  'kp': KPLogo,\n  'pp': PPLogo,\n  'rcb': RCBLogo,\n  'sh': SHLogo,\n  'srh': SHLogo,\n  'rr': RRLogo,\n  'mi': '/images/teams/mi.png', // Mumbai Indians\n  'lg': '/images/teams/lg.png', // Lucknow Giants\n};\n\n// Team logo mapping by full team name\nconst logosByName: Record<string, string> = {\n  // Ahmedabad Giants variants\n  'ahmedabad giants': AGLogo,\n  'ahmedabadgiants': AGLogo,\n  \n  // Chennai variants (CSK, Chennai Super Kings, Chennai Strikers)\n  'chennai super kings': CSLogo,\n  'chennaisuperkings': CSLogo,\n  'chennai strikers': CSLogo,\n  'chennaistrikers': CSLogo,\n  \n  // Delhi Capitals variants\n  'delhi capitals': DCLogo,\n  'delhicapitals': DCLogo,\n  \n  // Gujarat variants\n  'gujarat blasters': GBLogo,\n  'gujaratblasters': GBLogo,\n  'gujarat titans': GTLogo,\n  'gujarattitans': GTLogo,\n  \n  // Goa Gladiators variants\n  'goa gladiators': GGLogo,\n  'goagladiators': GGLogo,\n  \n  // Indore Titans variants\n  'indore titans': ITLogo,\n  'indoretitans': ITLogo,\n  \n  // Punjab Kings variants\n  'punjab kings': PBKSLogo,\n  'punjabkings': PBKSLogo,\n  'kings xi punjab': PBKSLogo,\n  'kingsxipunjab': PBKSLogo,\n  \n  // Kolkata variants (KKR, Kolkata Knight Riders, Kolkata Riders)\n  'kolkata knight riders': KKRLogo,\n  'kolkataknightriders': KKRLogo,\n  'kolkata riders': KKRLogo,\n  'kolkatariders': KKRLogo,\n  \n  // Kanpur Knights variants\n  'kanpur knights': KPLogo,\n  'kanpurknights': KPLogo,\n  \n  // Pune Panthers variants\n  'pune panthers': PPLogo,\n  'punepanthers': PPLogo,\n  \n  // RCB variants (Royal Challengers, Bangalore Tigers)\n  'royal challengers bengaluru': RCBLogo,\n  'royalchallengersbengaluru': RCBLogo,\n  'royal challengers bangalore': RCBLogo,\n  'royalchallengersbangalore': RCBLogo,\n  'bangalore tigers': RCBLogo,\n  'bangaloretigers': RCBLogo,\n  \n  // Sunrisers Hyderabad variants\n  'sunrisers hyderabad': SHLogo,\n  'sunrisershyderabad': SHLogo,\n  \n  // Rajasthan Royals variants\n  'rajasthan royals': RRLogo,\n  'rajasthanroyals': RRLogo,\n  \n  // Mumbai Indians variants\n  'mumbai indians': '/images/teams/mi.png',\n  'mumbaiindians': '/images/teams/mi.png',\n  \n  // Lucknow Giants variants\n  'lucknow giants': '/images/teams/lg.png',\n  'lucknowgiants': '/images/teams/lg.png',\n};\n\n// Token-based synonyms for flexible matching\nconst tokenSynonyms: Record<string, string> = {\n  // Team city/region tokens (most specific)\n  'chennai': 'cs',\n  'delhi': 'dc',\n  'mumbai': 'mi',\n  'kolkata': 'kkr',\n  'bangalore': 'rcb',\n  'bengaluru': 'rcb',\n  'hyderabad': 'srh',\n  'punjab': 'pbks',\n  'ahmedabad': 'ag',     // More specific than 'gujarat'\n  'rajasthan': 'rr',\n  'lucknow': 'lg',\n  'indore': 'it',\n  'goa': 'gg',\n  'kanpur': 'kp',\n  'pune': 'pp',\n  \n  // Specific team combinations to avoid ambiguity\n  'gujarattitans': 'gt',\n  'gujaratblasters': 'gb',\n  \n  // Team mascot/name tokens (only when unambiguous)\n  'sunrisers': 'srh',\n  'challengers': 'rcb',\n  \n  // Common abbreviations and exact matches\n  'csk': 'cs',\n  'rcb': 'rcb',\n  'mi': 'mi',\n  'kkr': 'kkr',\n  'dc': 'dc',\n  'gt': 'gt',\n  'srh': 'srh',\n  'pbks': 'pbks',\n  'rr': 'rr',\n  'ag': 'ag',\n  'gb': 'gb',\n  'gg': 'gg',\n  'it': 'it',\n  'lg': 'lg',\n  'lsg': 'lg',  // Lucknow Super Giants\n  'kp': 'kp',\n  'pp': 'pp',\n};\n\n/**\n * Normalizes a team name or ID to a consistent format for logo lookup\n * Uses token-based matching for better flexibility\n */\nexport function normalizeTeamKey(nameOrId: string): string {\n  if (!nameOrId) return '';\n  \n  // Convert to lowercase and remove special characters/spaces\n  const normalized = nameOrId\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s]/g, '')\n    .replace(/\\s+/g, ' ')\n    .trim();\n  \n  // First try exact match in tokenSynonyms\n  const noSpaces = normalized.replace(/\\s+/g, '');\n  if (tokenSynonyms[noSpaces]) {\n    return tokenSynonyms[noSpaces];\n  }\n  \n  // Then try token-based matching\n  const tokens = normalized.split(' ').filter(token => token.length > 0);\n  for (const token of tokens) {\n    if (tokenSynonyms[token]) {\n      return tokenSynonyms[token];\n    }\n  }\n  \n  // Return the normalized string if no tokens match\n  return noSpaces;\n}\n\n/**\n * Gets the team logo URL by team name or ID\n */\nexport function getTeamLogo(nameOrId: string): string | undefined {\n  if (!nameOrId) return undefined;\n  \n  // FIRST: Try exact full name match (highest priority)\n  const fullNameKey = nameOrId.toLowerCase().replace(/[^a-z0-9\\s]/g, '').replace(/\\s+/g, '');\n  if (logosByName[fullNameKey]) {\n    return logosByName[fullNameKey];\n  }\n  \n  // SECOND: Try normalized token-based matching (lower priority)\n  const normalizedKey = normalizeTeamKey(nameOrId);\n  if (logosByCode[normalizedKey]) {\n    return logosByCode[normalizedKey];\n  }\n  \n  // THIRD: Try the normalized key in names as fallback\n  if (logosByName[normalizedKey]) {\n    return logosByName[normalizedKey];\n  }\n  \n  return undefined;\n}\n\n/**\n * Gets all available team logos\n */\nexport function getAllTeamLogos(): Record<string, string> {\n  return {\n    ...logosByCode,\n    ...logosByName,\n  };\n}\n\n/**\n * Checks if a team has a logo available\n */\nexport function hasTeamLogo(nameOrId: string): boolean {\n  return getTeamLogo(nameOrId) !== undefined;\n}\n\n// Export individual logos for direct use if needed\nexport {\n  AGLogo,\n  CSLogo,\n  DCLogo,\n  GBLogo,\n  GGLogo,\n  GTLogo,\n  ITLogo,\n  PBKSLogo,\n  KKRLogo,\n  KPLogo,\n  PPLogo,\n  RCBLogo,\n  SHLogo,\n  RRLogo,\n};",
      "size_bytes": 6216
    },
    "client/src/components/PlayerDetailsModal.tsx": {
      "content": "import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Player } from '@/services/googleSheetsService';\n\ninterface PlayerDetailsModalProps {\n  player: Player | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const PlayerDetailsModal: React.FC<PlayerDetailsModalProps> = ({ \n  player, \n  isOpen, \n  onClose \n}) => {\n  if (!player) return null;\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount).replace('₹', '');\n  };\n\n  const hasImage = player.images && player.images.trim() !== '';\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"w-[95vw] max-w-[280px] sm:max-w-[320px] md:max-w-[400px] lg:max-w-[480px] xl:max-w-[520px] max-h-[95vh] sm:max-h-[90vh] mx-auto bg-gradient-to-br from-slate-800/95 via-slate-700/90 to-slate-600/85 border-slate-600/50 backdrop-blur-md rounded-xl sm:rounded-2xl overflow-hidden p-0\">\n        {/* Header */}\n        <DialogHeader className=\"sr-only\">\n          <DialogTitle>{player.name} Details</DialogTitle>\n          <DialogDescription>Player information and statistics</DialogDescription>\n        </DialogHeader>\n\n        \n        {/* Player Details Content */}\n        <div className=\"flex flex-col max-h-full overflow-y-auto p-3 sm:p-4 md:p-5 lg:p-6 text-center space-y-3 sm:space-y-4\">\n          {/* Player Name */}\n          <motion.div \n            className=\"flex-shrink-0\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.4, delay: 0.1 }}\n          >\n            <h2 className=\"text-lg sm:text-xl md:text-2xl lg:text-3xl font-bold text-white\" data-testid=\"text-player-name\">\n              {player.name}\n            </h2>\n            \n            {/* Country and Role */}\n            <p className=\"text-sm sm:text-base md:text-lg text-white/90 mt-1\" data-testid=\"text-player-info\">\n              {player.nation} - {player.role}\n            </p>\n          </motion.div>\n\n          {/* Player Image */}\n          <motion.div \n            className=\"flex justify-center flex-shrink-0\"\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.4, delay: 0.2 }}\n          >\n            <div className=\"relative w-24 h-24 xs:w-28 xs:h-28 sm:w-32 sm:h-32 md:w-36 md:h-36 lg:w-40 lg:h-40 overflow-hidden rounded-lg bg-slate-700 border-2 border-white/20\">\n              {hasImage ? (\n                <img\n                  src={player.images}\n                  alt={player.name}\n                  className=\"w-full h-full object-cover\"\n                  onError={(e) => {\n                    // Fallback to initials if image fails to load\n                    const target = e.target as HTMLImageElement;\n                    target.style.display = 'none';\n                    target.nextElementSibling?.classList.remove('hidden');\n                  }}\n                />\n              ) : null}\n              <div className={`${hasImage ? 'hidden' : 'flex'} absolute inset-0 items-center justify-center bg-slate-700 text-white font-bold text-lg sm:text-xl md:text-2xl lg:text-3xl`}>\n                {player.name.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2)}\n              </div>\n            </div>\n          </motion.div>\n\n          {/* Stats Grid */}\n          <motion.div \n            className=\"grid grid-cols-2 gap-2 sm:gap-3 md:gap-4 bg-slate-800/30 rounded-lg p-2 sm:p-3\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.4, delay: 0.3 }}\n          >\n            {/* Age */}\n            <div className=\"text-center\">\n              <p className=\"text-white/60 text-xs sm:text-sm uppercase tracking-wide\">Age</p>\n              <p className=\"text-white text-sm sm:text-base md:text-lg font-semibold\">{player.age || 'N/A'}</p>\n            </div>\n            \n            {/* Matches */}\n            <div className=\"text-center\">\n              <p className=\"text-white/60 text-xs sm:text-sm uppercase tracking-wide\">Matches</p>\n              <p className=\"text-white text-sm sm:text-base md:text-lg font-semibold\">{player.t20Matches || 'N/A'}</p>\n            </div>\n          </motion.div>\n\n          {/* Price and Points Grid */}\n          <motion.div \n            className=\"grid grid-cols-2 gap-2 sm:gap-3\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.4, delay: 0.4 }}\n          >\n            {/* Base Price */}\n            <div className=\"bg-slate-800/30 rounded-lg p-2 sm:p-3 text-center\">\n              <p className=\"text-white/60 text-xs sm:text-sm uppercase tracking-wide\">Base Price</p>\n              <p className=\"text-white text-sm sm:text-base md:text-lg font-bold\" data-testid=\"text-base-price\">\n                ₹{formatCurrency(player.basePrice)}\n              </p>\n            </div>\n\n            {/* Points */}\n            <div className=\"bg-slate-800/30 rounded-lg p-2 sm:p-3 text-center\">\n              <p className=\"text-white/60 text-xs sm:text-sm uppercase tracking-wide\">Points</p>\n              <p className=\"text-white text-sm sm:text-base md:text-lg font-bold\" data-testid=\"text-points\">\n                {player.points || 0}\n              </p>\n            </div>\n          </motion.div>\n\n          {/* Final Bid Price if sold */}\n          {player.status === 'sold' && player.soldPrice > 0 && (\n            <div className=\"bg-green-600/20 rounded-lg border border-green-500/30 p-2 sm:p-3 text-center\">\n              <p className=\"text-green-400 text-sm sm:text-base md:text-lg font-semibold\" data-testid=\"text-sold-price\">\n                Sold for: ₹{formatCurrency(player.soldPrice)}\n              </p>\n              <p className=\"text-green-300 text-xs sm:text-sm\" data-testid=\"text-team\">\n                Team: {player.team}\n              </p>\n            </div>\n          )}\n\n          {/* Overseas indicator */}\n          {player.overseas && (\n            <div className=\"flex justify-center\">\n              <span className=\"inline-flex items-center px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium bg-blue-600/20 text-blue-400 border border-blue-500/30\">\n                Overseas Player\n              </span>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};",
      "size_bytes": 6635
    },
    "client/src/components/LoadingPage.tsx": {
      "content": "import { useState, useEffect } from \"react\";\nconst stadiumImage = \"/images/backgrounds/stadium-bg.png\";\n\nexport const LoadingPage = (): JSX.Element => {\n  const [imageLoaded, setImageLoaded] = useState(false);\n\n  useEffect(() => {\n    // Preload the background image\n    const img = new Image();\n    img.onload = () => setImageLoaded(true);\n    img.onerror = () => setImageLoaded(true); // Show fallback even if image fails\n    img.src = stadiumImage;\n  }, []);\n\n  return (\n    <div className=\"fixed inset-0 w-full h-screen flex items-center justify-center z-50\">\n      {/* Background Image with fallback */}\n      <div \n        className={`absolute inset-0 w-full h-full bg-cover bg-center bg-no-repeat transition-opacity duration-500 ${\n          imageLoaded ? 'opacity-100' : 'opacity-0'\n        }`}\n        style={{ \n          backgroundImage: `url(${stadiumImage})`,\n        }}\n      />\n      \n      {/* Fallback background while image loads */}\n      {!imageLoaded && (\n        <div className=\"absolute inset-0 w-full h-full bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900\" />\n      )}\n      \n      {/* Dark Overlay */}\n      <div className=\"absolute inset-0 bg-black/60 backdrop-blur-sm\" />\n      \n      {/* Loading Content */}\n      <div className=\"relative z-10 flex flex-col items-center justify-center text-center px-4\">\n        {/* Title */}\n        <div className=\"mb-8\">\n          <h1 className=\"[font-family:'Work_Sans',Helvetica] font-bold text-[28px] sm:text-[36px] md:text-[42px] lg:text-[48px] leading-tight tracking-[0] mb-2\">\n            <span className=\"text-white\"> IPL 2025 </span>\n            <span className=\"text-[#fe6804]\">Player Auction</span>\n          </h1>\n          <p className=\"text-white/80 text-lg sm:text-xl font-medium\">\n            {imageLoaded ? 'Loading auction data...' : 'Preparing interface...'}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};",
      "size_bytes": 1918
    },
    "README.md": {
      "content": "# 🏏  IPL 2025 Player Auction Dashboard\n\nA modern, real-time web application for managing and displaying IPL (Indian Premier League) 2025 player auction data. Built with cutting-edge web technologies, it provides live visualization of player auction results, team statistics, and leaderboards through seamless Google Sheets integration.\n\n![IPL Auction Dashboard](attached_assets/1920w%20light_1758935519817.png)\n\n## ✨ Features\n\n### 🎯 Core Functionality\n- **Real-time Auction Data** - Live integration with Google Sheets for up-to-the-minute auction results\n- **Team Overview** - Comprehensive team cards showing funds, players, and statistics in ranking order\n- **Player Management** - Detailed views for sold and unsold players with advanced filtering\n- **Live Leaderboard** - Dynamic team rankings based on points, budget, and performance\n- **Responsive Design** - Optimized for desktop, tablet, and mobile viewing\n\n### 🚀 Technical Features\n- **Zero Loading Animations** - Instant data display without distracting spinners\n- **Smart Caching** - 30-second refresh intervals with intelligent data caching\n- **Type-Safe** - Full TypeScript implementation with runtime validation\n- **Modern UI** - Beautiful interface built with Tailwind CSS and shadcn/ui\n- **Real-time Updates** - Background data synchronization every 30 seconds\n\n## 🛠️ Technology Stack\n\n### Frontend\n- **React 18** - Modern React with hooks and concurrent features\n- **TypeScript** - Type-safe development with strict mode\n- **Vite** - Lightning-fast build tool and development server\n- **Tailwind CSS** - Utility-first CSS framework with custom IPL theming\n- **shadcn/ui** - High-quality accessible component library built on Radix UI\n- **TanStack Query** - Powerful data synchronization and caching\n- **Wouter** - Lightweight client-side routing\n- **Framer Motion** - Smooth animations and transitions\n\n### Backend\n- **Node.js** - JavaScript runtime built on Chrome's V8 engine\n- **Express.js** - Fast, minimalist web framework\n- **TypeScript** - Full backend type safety\n- **TSX** - Fast TypeScript execution for development\n\n### Data Storage & Management\n- **Google Sheets Integration** - Primary data source for real-time auction information\n- **In-memory Caching** - Fast data access with intelligent cache management\n- **Papa Parse** - Efficient CSV parsing for Google Sheets data\n- **TanStack Query Caching** - Advanced client-side data caching and synchronization\n\n### External Integrations\n- **Google Sheets API** - Live data source for auction information\n- **Papa Parse** - Efficient CSV parsing for Google Sheets data\n- **Real-time Data Processing** - Custom service layer for data transformation\n\n## 📊 Data Sources\n\nThe application integrates with Google Sheets containing:\n- **Teams & Budget Sheet** - Team information, budgets, and spending\n- **Players Catalogue** - Complete player database with details\n- **Auctioneer Sheet** - Live auction results and player status\n\n## 🚀 Quick Start\n\n### Prerequisites\n- Node.js 18+ \n- npm or yarn package manager\n- Google Sheets with publicly accessible data (CSV export enabled)\n\n### Installation\n\n1. **Clone the repository**\n```bash\ngit clone <repository-url>\ncd ipl-auction-dashboard\n```\n\n2. **Install dependencies**\n```bash\nnpm install\n```\n\n3. **Set up environment variables**\n```bash\ncp .env.example .env\n```\n\n4. **Start the development server**\n```bash\nnpm run dev\n```\n\n5. **Open your browser**\nNavigate to `http://localhost:5000`\n\n## 🌐 Vercel Deployment\n\n### Deploy to Vercel\n\n[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=<your-repo-url>)\n\n### Manual Deployment Steps\n\n1. **Install Vercel CLI**\n```bash\nnpm i -g vercel\n```\n\n2. **Login to Vercel**\n```bash\nvercel login\n```\n\n3. **Deploy**\n```bash\nvercel --prod\n```\n\n### Vercel Configuration\n\nThe application is configured to work with Vercel's automatic deployment. The build configuration is already set up in `package.json`:\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\",\n    \"start\": \"NODE_ENV=production node dist/index.js\"\n  }\n}\n```\n\nVercel will automatically:\n1. Run `npm run build` to build the frontend and backend\n2. Use `npm run start` to start the production server\n3. Deploy as a single serverless function\n\n## 🔧 Environment Variables\n\nSet these environment variables in your deployment:\n\n### Required\n```env\n# Server Configuration  \nPORT=5000\nNODE_ENV=production\n```\n\n### Optional\n```env\n# Google Sheets Configuration (if using private sheets)\nGOOGLE_SHEETS_API_KEY=your-api-key-here\nGOOGLE_SHEETS_ID=your-sheet-id-here\n```\n\n### Development Only\n```env\nREPL_ID=your-repl-id  # Only needed for Replit environment\n```\n\n### Setting Environment Variables in Vercel\n\n1. Go to your Vercel project dashboard\n2. Navigate to **Settings** → **Environment Variables**\n3. Add each variable with appropriate values\n4. Redeploy your application\n\n## 📁 Project Structure\n\n```\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── hooks/          # Custom React hooks\n│   │   ├── lib/            # Utility libraries\n│   │   ├── pages/          # Page components and sections\n│   │   ├── services/       # External service integrations\n│   │   └── assets/         # Static assets and configurations\n│   ├── public/             # Public static files\n│   └── index.html          # HTML entry point\n├── server/                 # Backend Express application\n│   ├── index.ts            # Server entry point\n│   ├── routes.ts           # API route definitions\n│   ├── storage.ts          # Storage interface and implementations\n│   └── vite.ts             # Vite integration for development\n├── shared/                 # Shared TypeScript types and schemas\n│   └── schema.ts           # Database schemas and validation\n├── attached_assets/        # Project assets and images\n├── package.json            # Project dependencies and scripts\n├── vite.config.ts          # Vite configuration\n├── tsconfig.json           # TypeScript configuration\n├── tailwind.config.ts      # Tailwind CSS configuration\n├── drizzle.config.ts       # Database ORM configuration\n└── README.md               # This file\n```\n\n## 🎮 Usage\n\n### Navigation\n- **Overview** - Team cards sorted by current ranking\n- **Sold Players** - All purchased players with team filtering\n- **Unsold Players** - Available players still in the auction pool\n- **Leaderboard** - Complete team rankings with detailed statistics\n\n### Features in Detail\n\n#### Team Overview\n- Teams automatically sorted by total points (highest first)\n- Real-time budget tracking and remaining funds\n- Player count including overseas player limits\n- Click any team card to view detailed team information\n\n#### Player Tables\n- Advanced sorting by multiple criteria\n- Team-based filtering for sold players\n- Real-time status updates from Google Sheets\n- Comprehensive player statistics and information\n\n#### Leaderboard\n- Multi-level ranking system:\n  1. Total Team Points (primary)\n  2. Funds Remaining (secondary)\n  3. Team Name (tertiary)\n- Interactive sorting by any column\n- Real-time updates every 30 seconds\n\n## 🛠️ Development\n\n### Available Scripts\n\n```bash\n# Development\nnpm run dev          # Start development server with hot reload\nnpm run check        # Run TypeScript type checking\n\n# Production\nnpm run build        # Build for production\nnpm run start        # Start production server\n\n# Code Quality\nnpm run check        # Run TypeScript type checking only\n```\n\n### Development Workflow\n\n1. **Start the development server**\n```bash\nnpm run dev\n```\n\n2. **Make your changes** - The app will automatically reload\n\n3. **Run type checking**\n```bash\nnpm run check\n```\n\n4. **Test your changes** - Verify functionality across all tabs\n\n5. **Build for production**\n```bash\nnpm run build\n```\n\n### Code Style Guidelines\n\n- **TypeScript** - Use strict mode with comprehensive type safety\n- **Component Structure** - Follow React functional components with hooks\n- **Styling** - Use Tailwind CSS with shadcn/ui components\n- **State Management** - Leverage TanStack Query for server state\n- **Error Handling** - Implement comprehensive error boundaries\n\n## 📖 API Reference\n\n### Internal API Endpoints\n\nThe application uses internal API routes for data fetching:\n\n- `GET /api/teams` - Fetch team statistics\n- `GET /api/players` - Fetch all players\n- `GET /api/leaderboard` - Fetch sorted team rankings\n- `GET /api/players/sold/:teamId` - Fetch sold players by team\n- `GET /api/players/unsold` - Fetch unsold players\n\n## 🔍 Troubleshooting\n\n### Common Issues\n\n#### 1. Google Sheets Data Loading Issues\n```bash\nFailed to load resource: the server responded with a status of 400\n```\n**Solution**: Verify Google Sheets are publicly accessible and CSV export URLs are valid.\n\n#### 2. Build Failures\n```bash\nType error: Cannot find module '@/components/ui/...'\n```\n**Solution**: Check that all shadcn/ui components are properly installed and paths are correct.\n\n#### 3. Google Sheets Integration Issues\n- Ensure sheets have proper column headers matching expected format\n- Check that team names and player data are consistent\n- Verify sheet permissions allow public CSV export\n\n#### 4. Vercel Deployment Issues\n- Confirm all environment variables are set in Vercel dashboard\n- Check build logs for specific error messages\n- Verify `vercel.json` configuration is correct\n\n### Performance Optimization\n\n- **Caching**: Data is cached for 15 seconds with background refetching every 30 seconds\n- **Bundle Splitting**: Automatic code splitting for optimal loading\n- **Image Optimization**: Use appropriate image formats and sizes\n- **Google Sheets Optimization**: Use efficient sheet structures and avoid overly complex formulas\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🏏 About IPL 2025\n\nThe Indian Premier League (IPL) 2025 promises to be the most exciting season yet. This dashboard provides real-time insights into the player auction process, helping fans, analysts, and team management track the dynamic world of cricket's premier T20 league.\n\n---\n\n**Built with ❤️ for cricket fans worldwide**\n\nFor support or questions, please open an issue on GitHub.",
      "size_bytes": 10864
    },
    "start-production.js": {
      "content": "#!/usr/bin/env node\n\n/**\n * Handles server initialization for IPL Auction Dashboard\n * This app fetches data directly from Google Sheets - no backend database or API keys required\n */\n\nimport { spawn } from \"child_process\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconsole.log(\"✅ IPL Auction Dashboard - Production startup\");\nconsole.log(\"📊 This app fetches data directly from Google Sheets\");\nconsole.log(\"🚀 Starting production server...\");\n\n// Set production environment\nprocess.env.NODE_ENV = \"production\";\n\n// Start the production server with production environment\nconst serverPath = path.join(__dirname, \"dist\", \"index.js\");\nconst server = spawn(\"node\", [serverPath], {\n  stdio: \"inherit\",\n  env: {\n    ...process.env,\n    NODE_ENV: \"production\",\n  },\n});\n\n// Handle server process events\nserver.on(\"error\", (error) => {\n  console.error(\"❌ Failed to start server:\", error.message);\n  process.exit(1);\n});\n\nserver.on(\"exit\", (code, signal) => {\n  if (signal) {\n    console.log(`🛑 Server terminated by signal: ${signal}`);\n  } else if (code !== 0) {\n    console.error(`❌ Server exited with code: ${code}`);\n    process.exit(code);\n  } else {\n    console.log(\"✅ Server shut down gracefully\");\n  }\n});\n\n// Handle process termination\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully...\");\n  server.kill(\"SIGTERM\");\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully...\");\n  server.kill(\"SIGINT\");\n});",
      "size_bytes": 1625
    }
  },
  "version": 1
}
